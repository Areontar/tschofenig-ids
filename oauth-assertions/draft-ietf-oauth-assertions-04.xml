<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
  <?rfc strict="yes" ?>

  <?rfc toc="yes" ?>

  <?rfc tocdepth="3" ?>

  <?rfc symrefs="yes" ?>

  <?rfc sortrefs="yes"?>

  <?rfc compact="yes" ?>

  <?rfc subcompact="no" ?>

  <?rfc iprnotified="yes" ?>

    <rfc category="std" docName="draft-ietf-oauth-assertions-04" ipr="trust200902">

    <!-- category values: std, bcp, info, exp, and historic
ipr values: full3667, noModification3667, noDerivatives3667
you can add the attributes updates="NNNN" and obsoletes="NNNN"
they will automatically be output with "(if approved)" -->

  <front>
    <title>Assertion Framework for OAuth 2.0</title>

    <author fullname="Chuck Mortimore" initials="C." role="editor"
            surname="Mortimore">
      <organization abbrev="Salesforce">Salesforce.com</organization>

      <address>
        <email>cmortimore@salesforce.com</email>
      </address>
    </author>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization abbrev="Microsoft">Microsoft</organization>

      <address>
        <email>mbj@microsoft.com</email>
      </address>
    </author>

    <author fullname="Brian Campbell" initials="B." surname="Campbell">
      <organization abbrev="Ping">Ping Identity Corp.</organization>

      <address>
        <email>brian.d.campbell@gmail.com</email>
      </address>
    </author>

    <author fullname="Yaron Y. Goland" initials="Y.Y." surname="Goland">
      <organization abbrev="Microsoft">Microsoft</organization>

      <address>
        <email>yarong@microsoft.com</email>
      </address>
    </author>

    <date year="2012" />


	        <!-- Meta-data Declarations -->

	        <area>Security</area>

	        <workgroup>OAuth</workgroup> 

	        <!-- WG name at the upperleft corner of the doc,
	IETF is fine for individual submissions.
	If this element is not present, the default is "Network Working Group",
	which is used by the RFC Editor as a nod to the history of the IETF. -->

	        <keyword>OAuth</keyword>
	        <keyword>SAML</keyword>
	        <keyword>Assertion</keyword>



    <abstract>
      <t>This specification provides a framework for the use of
      assertions with OAuth 2.0 in the form of new client authentication mechanism and a new authorization grant type.  
	  This document specifies a mechanism for transporting assertions during
      interactions with a token endpoint, as well as processing rules.</t>
	  
	  <t>The intent of this specification is let OAuth 2.0 interwork with other identity
management systems, and to provide alternative security mechanisms.</t>

      <t>Note that this specification only defines abstract message flows and processing 
	  rules and that companion specifications are necessary to provide the corresponding 
	  instantiation in order to be implementable.</t>
    </abstract>
  </front>

  <middle>
  
  <!-- ************************************************************************* --> 
	  
    <section anchor="overview" title="Introduction">
      <t>OAuth 2.0 <xref target="I-D.ietf-oauth-v2"/> is an authorization protocol that enables a third-party
   application to obtain limited access to a protected resource, either on
   behalf of a resource owner by orchestrating an approval interaction
   between the resource owner and the HTTP service, or by allowing the
   third-party application to obtain access on its own behalf. 
   </t>
	  <t><xref target="oauth-flow"/> 
	  shows the abstract OAuth 2.0 protocol exchanges graphically. In step (C) the client presents 
	  the authorization grant to the authorization server in exchange for an access token. 
	  This access token is then used by the client in step (E) to access a protected 
	  resource at the resource server. In addition to presenting the access token to the 
	  resource server in most use cases the client also needs to authenticate itself to the resource 
	  server, which is referred as client authentication.</t> 
	  <t>
        <figure anchor="oauth-flow" title="Abstract OAuth 2.0 Protocol Flow">
          <artwork><![CDATA[
     +--------+                               +---------------+
     |        |--(A)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(B)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(C)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(D)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(E)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(F)--- Protected Resource ---|               |
     +--------+                               +---------------+		  
]]></artwork>
        </figure>
	  </t>
	  
	  <t>This document allows the OAuth 2.0 framework to be enhanced to 
	  make use of assertions in two phases of the described protocol exchange, namely 
	 
	  <list style="hanging">
	  
	  <t hangText="Assertions as a new Authorization Grant Type:"><vspace blankLines="1"/> 
	  An authorization grant is a credential representing the resource
   owner's authorization (to access its protected resources) used by the
   client to obtain an access token.  Several authorization grant types are
      defined in <xref target="I-D.ietf-oauth-v2"/> to support a wide range of 
	  usage scenarios, namely authorization code, implicit, resource owner password
   credentials, and client credentials, as well as an extensibility
   mechanism for defining additional types.
   <vspace blankLines="1"/> 
   This document defines such an additional grant type where an assertion 
	  can be used by the client to obtain an access token. This step concerns the exchange in 
	  step (C) and step (D) of <xref target="oauth-flow"/>.</t>
	  
   <t hangText="Assertions as a new Client Authentication Mechanism:"><vspace blankLines="1"/> 
   Section 2 of <xref target="I-D.ietf-oauth-v2"/> describes the process for client registration, the types of clients, and also defines two client authentication mechanisms in Section 2.3.1 using HTTP Basic and a custom OAuth security mechanism.
  <vspace blankLines="1"/> This document defines a new client authentication mechanism that utilizes assertions.  This step concerns the exchange in 
	  step (E) and step (F) of <xref target="oauth-flow"/>.
   </t>
   </list>
   </t>
	  
	  <t>
	  Note: The use of assertions for client
      authentication is orthogonal and separable from using assertions as an
      authorization grant and can be used either in combination or in
      isolation.
	  </t>
	  
	  </section> 
	  
	  <!-- ************************************************************************* --> 
	  
	  <section anchor="rnc" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref> .</t>

      <t>Throughout this document, values are quoted to indicate that they are
      to be taken literally. When using these values in protocol messages, the
      quotes must not be used as part of the value.</t>
    </section>

	<!-- ************************************************************************* --> 
	
    <section anchor="framework" title="Framework">
	 
	 <t>An assertion is a package of information including issuer and
   subject, conditions, and/or attribute statements, and/or
   authentication statements and/or other statements.  Statements may or
   may not be present. Note: Assertions MUST always be protected against tampering
   using a digital signature or a keyed message digest applied by the issuer.
   An assertion MAY additionally be encrypted to prevent unauthorized parties 
from inspecting the content.</t>

   <t>Typically, an assertion "container" contains
   the following: 
   <list style="hanging"> 
   <t hangText="Issuing information:"> <vspace blankLines="1"/> 
      Who issued the assertion, when was it issued and the assertion
      identifier.</t>
   <t hangText="Subject information:"><vspace blankLines="1"/> 
      The name of the subject, the security domain and optional subject
      information, like a public key.</t>
   <t hangText="Conditions under which the assertion is valid:"><vspace blankLines="1"/> 
      Special kinds of conditions, such as the validity period or one-time-use, may be included.</t>
   </list> 
   </t>

   <t>Assertions may also contain attribute statements and authentication 
   statements. Here are explanatory examples:
    <list style="empty">
    <t>With an assertion containing an attribute statement, an
      issuing authority is asserting that the subject is associated with
      certain attributes with certain subject profile attribute values.
      For example, user jon@cs.example.com is associated with the
      attribute "Department", which has the value "Computer Science".</t>
    <t>With an assertion containing an authentication statement,
      an issuing authority is asserting that the subject was
      authenticated by certain means at a certain time.	</t>
	</list>
	</t>
	
	<t>In addition to the content of the assertions a security relevant aspect is also 
	who created these assertions, i.e., who is the issuer?, and what relationship exists
	between the issuer and the relying party. Note that we use the term relying party 
	instead of authorization server or resource server.</t>
	
	<t>	In our context there are two possible scenarios, as shown in <xref target="third-party-created"/> and in <xref target="self-created"/>. This document supports both usages and deployments need to determine the best possible variant based on the required level of security. These two usages are always applicable when assertions are used for client authentication and/or authorization grants. As such, in a single protocol exchange two assertions may be used and these two assertions may have different security properties, as explained below. </t>
	 
	<t>Third party created assertion assume some protocol mechanism to exist to allow an OAuth client to submit a request for a new assertion to a newly introduced entity, called the 'Token Service'. The token service is an entity capable of     issuing, renewing, transforming and validating of security tokens. This is shown in step (1). The role of the token service is to obtain requests for authenticated clients and to mint assertions as requested, to fill the assertion with verified information, and to sign them afterwards. When the token service returns the assertion to the client in step (2) the client performs two possible actions before continuing the protocol interaction with the relying party as shown in step (3):
	
	<list style="numbers"> 
	
	<t>The client may use the assertion as a proof-of-possession token, which requires a secure communication channel between the relying party and the client to avoid leaking the assertion to unauthorized parties.</t>
	
	<t>The client may need to demonstrate possession of cryptographic keying material that has to be applied to the request. 
	This concept is also known as 'holder-of-the-key'. The token service thereby binds a key identifier to the assertion and the client has to demonstrate to the relying party that it knows the key corresponding to that identifier when presenting the assertion in step (3). This mechanism provides additional security properties.</t>
	</list> 
	</t> 
	
    <t>	 
	 <figure anchor="third-party-created" title="Third Party created Assertion">
          <artwork><![CDATA[
  Relying                                             
  Party                     Client                   Token Service 
    |                          |                         |
    |                          |  1) Request Assertion   |
    |                          |------------------------>|
    |                          |                         |
    |                          |  2) Assertion           |
    |                          |<------------------------|
    |    3) Assertion          |                         |
    |<-------------------------|                         |
    |                          |                         |
    |    4) OK or Failure      |                         | 
    |------------------------->|                         |
    |                          |                         |
    |                          |                         |	
		  ]]></artwork>
        </figure>
		</t> 

    <t>In <xref target="self-created"/> we show the second possible usage scneario where the client creates assertions 
     locally. In order to sign the assertion it has to obtain keying material (either a symmetric key or an assymetric key pair out-of-band). Any information that is included in the assertion by the client itself will typically be of limited value to the relying party and for this reason only a bare minimum is included in such an assertion, such as issuing information.</t>
    <t>	 
	 <figure anchor="self-created" title="Self-Created Assertion">
          <artwork><![CDATA[
  Relying                                             
  Party                     Client                     
    |                          |  
    |                          | 1) Create
    |                          |    Assertion
    |                          |--------------+
    |                          |              |
    |                          | 2) Assertion |
    |                          |<-------------+
    |    3) Assertion          |               
    |<-------------------------|                
    |                          |               
    |    4) OK or Failure      |            
    |------------------------->|               
    |                          |            
    |                          |           
		  ]]></artwork>
        </figure>
		</t> 		
		
	
	</section> 
	
	<!-- ************************************************************************* --> 
	  
    <section title="Transporting Assertions" anchor="transporting">
      <t>This section defines HTTP parameters for transporting
      assertions for the interaction with a token endpoint.
	  </t>
	  
	  

	        <section title="Using Assertions as Authorization Grants" anchor="authgrants">
  
        <t>This section defines the use of assertions as authorization grants
        based on the definition provided in Section 4.5 of <xref target="I-D.ietf-oauth-v2">OAuth 2.0</xref>. 
		When using assertions as authorization grants, the client
        includes the assertion and related information using the following HTTP request
        parameters:</t>

        <t><list style="hanging">

            <t hangText="grant_type:">REQUIRED. The format of the assertion as
            defined by the authorization server. The value MUST be an absolute
            URI.</t>

            <t hangText="assertion:">REQUIRED. The assertion being used as an
            authorization grant. Specific serialization of the assertion is
            defined by profile documents. The serialization MUST be encoded
            for transport within HTTP forms. It is RECOMMENDED that base64url
            be used.</t>

            <t hangText="scope:">OPTIONAL. The requested scope as
            described in Section 3.3 of <xref target="I-D.ietf-oauth-v2">OAuth
            2.0</xref>. When
            exchanging assertions for access tokens, the authorization for the
            token has been previously granted through some out-of-band mechanism. As
            such, the requested scope MUST be equal or lesser than the scope
            originally granted to the authorized accessor. If the scope
            parameter and/or value is omitted, the scope MUST be treated as
            equal to the scope originally granted to the authorized accessor.
            The Authorization Server MUST limit the scope of the issued
            access token to be equal or lesser than the scope originally
            granted to the authorized accessor.</t>
          </list></t>

        <t>The following non-normative example demonstrates an assertion being
        used as an authorization grant
	(with line breaks for display purposes only):</t>

        <figure>
          <artwork><![CDATA[POST /token HTTP/1.1 
Host: server.example.com 
Content-Type: application/x-www-form-urlencoded

client_id=s6BhdRkqt3&
grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-bearer&
assertion=PHNhbWxwOl...[omitted for brevity]...ZT4]]></artwork>
        </figure>

        <t>The assertion is a short lived representation
          of the authorization grant and authorization servers SHOULD NOT issue access tokens
          that exceed that lifetime by a significant period. [EDITOR's NOTE: '... exceed that lifetime' - what lifetime] In practice, that will
          usually mean that refresh tokens are not issued in response to assertion
          grant requests and access tokens will be issued with a reasonably short lifetime.
          Clients can refresh an expired access token by requesting a new one using the same
          assertion, if it is still valid, or with a new assertion.
        </t>

        <section title="Error Responses">
            <t>If an assertion is not valid or has expired, the Authorization Server
          MUST construct an error response as defined in <xref
          target="I-D.ietf-oauth-v2">OAuth 2.0</xref>. The value of the <spanx style='verb'>error</spanx>
          parameter MUST be the <spanx style='verb'>invalid_grant</spanx> error code. The authorization
          server MAY include additional information regarding the reasons the
          assertion was considered invalid using the <spanx style='verb'>error_description</spanx> or
          <spanx style='verb'>error_uri</spanx> parameters.</t>


      <t>For example:</t>

      <figure>
        <artwork><![CDATA[HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store

{
  "error":"invalid_grant",
  "error_description":"Audience validation failed"
}]]></artwork>
      </figure>

             </section>
      </section>
	  
      <section title="Using Assertions for Client Authentication" anchor="clientauth">
       

        <t>The following section defines the use of assertions as client
        credentials as an extension of Section 2.3 of <xref
        target="I-D.ietf-oauth-v2">OAuth 2.0</xref>. When using
        assertions as client credentials, the client includes the assertion
        and related information using the following HTTP request parameters:</t>

        <t><list style="hanging">
            <t hangText="client_id:">OPTIONAL. The client identifier as
            described in Section 2.2 of <xref target="I-D.ietf-oauth-v2">OAuth
            2.0</xref>. When present, the <spanx style='verb'>client_id</spanx> MUST identify the client to the authorization server.</t>

            <t hangText="client_assertion_type:">REQUIRED. The format of the
            assertion as defined by the authorization server. The value MUST
            be an absolute URI.</t>

            <t hangText="client_assertion:">REQUIRED. The assertion being used
            to authenticate the client. Specific serialization of the
            assertion is defined by profile documents. The serialization MUST
            be encoded for transport within HTTP forms. It is RECOMMENDED that
            base64url be used.</t>
          </list></t>

        <t>The following non-normative example demonstrates a client
        authenticating using an assertion during an Authorization
        Token Request as defined in Section 4.1.3 of
	<xref target="I-D.ietf-oauth-v2">OAuth 2.0</xref>
	(with line breaks for display purposes only):</t>

        <figure>
          <artwork><![CDATA[
POST /token HTTP/1.1 
Host: server.example.com 
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&
code=i1WsRn1uB1&
client_id=s6BhdRkqt3&
client_assertion_type=urn%3Aietf%3Aparams%3Aoauth
%3Aclient-assertion-type%3Asaml2-bearer&
client_assertion=PHNhbW...[omitted for brevity]...ZT]]></artwork>
        </figure>

        <t>Token endpoints can differentiate between assertion based
      credentials and other client credential types by looking for the
      presence of the <spanx style='verb'>client_assertion</spanx> and
      <spanx style='verb'>client_assertion_type</spanx> parameters,
      which will only be present when using assertions for client
      authentication.</t>




       <section title="Error Responses">

      <t>If an assertion is invalid for any reason or if more than one client authentication mechanism is used, the Authorization
      Server MUST construct an error response as defined in <xref
      target="I-D.ietf-oauth-v2">OAuth 2.0</xref>. The value of the <spanx style='verb'>error</spanx>
      parameter MUST be the <spanx style='verb'>invalid_client</spanx> error code. The
      authorization server MAY include additional information regarding the
      reasons the client assertion was considered invalid using the <spanx style='verb'>error_description</spanx>
      or <spanx style='verb'>error_uri</spanx> parameters.</t>

      <t>For example:</t>

      <figure>
        <artwork><![CDATA[HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store

{
  "error":"invalid_client"
  "error_description":"Multiple Credentials Not Allowed"
}]]></artwork>
      </figure>

    </section>

      </section>

    </section>

	  <!-- ************************************************************************* --> 
	
    <section title="Assertion Content and Processing" anchor="contentprocessing">
      <t>This section provides a general content and processing model for the
      use of assertions in <xref target="I-D.ietf-oauth-v2">OAuth
      2.0</xref>.</t>


    <section anchor="generic" title="Generic Assertion Content and Processing Rules"> 
    
<t>The following are entities and metadata involved in the issuance,
        exchange and processing of assertions in OAuth 2.0. These are general
        terms, abstract from any particular assertion format. Mappings of
        these terms into specific representations are provided by profiles of
        this specification.</t>

        <t><list style="hanging">
            <t hangText="Issuer:">REQUIRED. The unique identifier for the entity that
            issued the assertion. Generally this is the entity that holds the
            keying material used to compute a digital signature or a keyed message digest over the assertion. 
            In some use cases
            Issuers may be either OAuth clients (when assertions are
            self-created, see <xref target="self-created"/>) or obtained from a third party token service, see <xref target="third-party-created"/>. If the
            assertion is self-created, the Issuer SHOULD correspond to the content of the 'client_id'.
            If the assertion is third party created, the Issuer MUST identify the third party.</t>

            <t hangText="Principal:">OPTIONAL. A unique identifier for the subject of the
            assertion. The used value for the principal depends on whether the assertion is used for client authentication or as an authorization grant. 
            
            <!-- 
            
            <t>The Principal SHOULD indicate to the Authorization Server that
            the client is acting on-behalf of an anonymous user as defined by
            the Authorization Server. It is implied that authorization is based
            upon additional criteria, such as additional attributes or claims
            provided in the assertion. For example, a client may present an
            assertion from a trusted issuer asserting that the bearer is over
            18 via an included claim. In this case, no additional information
            about the user's identity is included yet all the data needed to
            issue an access token is present.</t>
            
            --> 
            
         </t>

            <t hangText="Audience:">REQUIRED. The assertion MUST contain an Audience element that identifies the
            Authorization Server as the intended audience using the Authorization
            Server's Token Endpoint URI. The Authorization
            Server MUST verify that it is an intended audience for the
            assertion.</t>

            <t hangText="Issued At:">OPTIONAL. The time at which the assertion was
            issued. While the serialization may differ by assertion format,
            this is always expressed in UTC with no time zone component.</t>

            <t hangText="Expires At:">REQUIRED. The time at which the assertion expires.
            While the serialization may differ by assertion format, this is
            always expressed in UTC with no time zone component. This field limits the
            time window during which the assertion can be used. The
            authorization server MUST verify that the expiration time has not
            passed, subject to allowable clock skew between systems. The
            authorization server SHOULD reject assertions with an Expires At
            attribute value that is unreasonably far in the future.</t>

            <t hangText="Assertion ID:">OPTIONAL. A nonce or unique identifier for the
            assertion. The Assertion ID may be used by implementations
            requiring message replay protection for one-time use assertions. Any
            entity that assigns an identifier MUST ensure that there is
            negligible probability that that entity or any other entity will
            accidentally assign the same identifier to a different data
            object. An Authorization
            Server MAY dictate that Assertion ID is mandatory.</t>
          </list></t>
          
          <t>The Authorization Server MUST validate the assertion's signature
            in order to verify the Issuer of the assertion, and to prevent 
            a number of attacks.</t>
    </section>


      <section title="Using Assertions for Client Authentication">
        <t>This section describes additional processing rules in addition to those listed in <xref target="generic"/> when assertions are used for client authentication: 
              
        <list style="symbols">

            <t>The <spanx style='verb'>client_assertion_type</spanx> HTTP parameter MUST identify the
            assertion format being used for authentication.</t>

            <t>The <spanx style='verb'>client_assertion</spanx> HTTP parameter MUST contain the serialized
            assertion in a format indicated by the <spanx style='verb'>client_assertion_type</spanx>
            parameter.</t>

            <t>The Principal SHOULD be the <spanx style='verb'>client_id</spanx>.</t>

          </list></t>

        <t>The following non-normative example demonstrates the use of a
        client authentication using an assertion during an
        Access Token Request as defined in Section 4.1.3 of
	<xref target="I-D.ietf-oauth-v2">OAuth 2.0</xref>
	(with line breaks for display purposes only):</t>
     <t>
        <figure>
          <artwork><![CDATA[POST /token HTTP/1.1 
Host: server.example.com 
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&
code=i1WsRn1uB1&
client_id=s6BhdRkqt3&
client_assertion_type=urn%3Aietf%3Aparams%3Aoauth
%3Aclient-assertion-type%3Asaml2-bearer&
client_assertion=PHNhb...[omitted for brevity]...ZT4]]></artwork>
        </figure>
      </t>
      </section>



      <section title="Using Assertions as Authorization Grants">
        <t>This section describes the processing rules when utilizing a authorization grant.</t>
        
        <t>
       <list style="symbols">

            <t>The grant_type HTTP request parameter MUST indicate the
            assertion format.</t>

            <t>The assertion HTTP parameter MUST contain the serialized
            assertion as in a format indicated by the grant_type
            parameter.</t>

            <t>The Principal MUST identify an authorized accessor for whom the
            access token is being requested (typically the resource owner, or
            an authorized delegate).</t>

          </list></t>

        <t>The following non-normative example demonstrates the use of an SAML2 bearer 
        assertion as an authorization grant with line breaks for display purposes only:</t>

        <figure>
          <artwork><![CDATA[POST /token HTTP/1.1 
Host: server.example.com 
Content-Type: application/x-www-form-urlencoded

client_id=s6BhdRkqt3&
grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-bearer&
assertion=PHNhbWxwOl...[omitted for brevity]...ZT]]></artwork>
        </figure>
      </section>


      <section title="Hybrid Client Authentication and Authorization Grant">
      
      <t>[Editor's Note: There is something wrong with the example below since it show two assertions, one in client_assertion (for the client authenthentication, and another one, for the authorization grant in assertion.</t> 
       
        <t>This section describes a 
        special case that combines both client authentication and
        authorization grant usage patterns. In this case, the interactions
        with the authorization server SHOULD be treated as using an assertion
        for Client Authentication according to <xref target="clientauth" />, with the addition
        of a grant_type parameter. The following format and processing rules
        apply.<list style="symbols">

            <t>The grant_type HTTP request parameter MUST be
            <spanx style='verb'>client_credentials</spanx>.</t>


            <t>The <spanx style='verb'>client_assertion_type</spanx> HTTP parameter MUST identify the
            assertion format.</t>

            <t>The <spanx style='verb'>client_assertion</spanx> HTTP parameter MUST contain the serialized
            assertion as in a format indicated by the <spanx style='verb'>client_assertion_type</spanx>
            parameter.</t>

            <t>The Principal SHOULD be the <spanx style='verb'>client_id</spanx>.</t>
          </list></t>

        <t>The following non-normative example demonstrates the use of a
        sample assertion being used for a Client Credentials Access Token
        Request as defined in Section 4.4.2 of
	<xref target="I-D.ietf-oauth-v2">OAuth 2.0</xref>
	(with line breaks for display purposes only):</t>

        <figure>
          <artwork><![CDATA[POST /token HTTP/1.1 
Host: server.example.com 
Content-Type: application/x-www-form-urlencoded

client_id=s6BhdRkqt3&
grant_type=client_credentials&
client_assertion_type=urn%3Aietf%3Aparams%3Aoauth
%3Aclient-assertion-type%3Asaml2-bearer&
client_assertion=PHNhbW...[omitted for brevity]...ZT]]></artwork>
        </figure>
      </section>

    </section>

    <section anchor="Security" title="Security Considerations">

	<t>This section discusses security considerations when using assertions with OAuth 2.0 as proposed in this document. 
As described in <xref target="framework"/> there are two different ways to obtain assertions, either as self-created assertions as well as assertions obtained from third party token services. While the actual interactions for obtaining these assertions is outside the scope of this document from a security point of view these details matter and <xref target="framework"/> addresses these high level architectural aspects. </t>

<t>The rest of this section focuses on the exchanges that concerns presenting an assertion for client authentication and for the authorization grant. </t>


<section title="Forged Assertion">

<t>
<list style="hanging"> 
<t hangText="Threat:"><vspace blankLines="1"/>

      An adversary could forge or alter an assertion in order to
      obtain an access token (in case of the authorization grant) or to 
	  impersonate a client (in case of the client authentication mechanism).</t>

<t hangText="Countermeasures:"><vspace blankLines="1"/>

      To avoid this kind of attack, the entities must assure that proper
      mechanisms for protecting any assertion are employed. This includes 
	  digitally signing the assertion by the issuer or to compute a keyed 
	  message digest over the assertion. Furthermore, in cases where the 
      client is merely passing the assertion obtained from a third party 
token service onwards the transport of the assertion must happen over a 
secure channel after the client authenticated the intented recipient. 
</t>
</list> 
</t>
</section>

<section title="Stolen Assertion">

<t>
<list style="hanging"> 
<t hangText="Threat:"><vspace blankLines="1"/>

      An adversary may be able obtain an assertion (e.g., by eavesdropping) 
	  and to then re-use it (replay it) at a later point in time. </t>

	  <t hangText="Countermeasures:"><vspace blankLines="1"/>
      An assertion may contain several elements to prevent replay
      attacks.  There is, however, a clear tradeoff between 
	  re-using an assertion for multiple exchanges and obtaining and creating 
	  new fresh assertions.<vspace blankLines="1"/>
	  Authorization Servers and Resource Servers may use a combination of the
   Assertion ID and Issued At/Expires At attributes for replay protection.  Previously
   processed assertions may be rejected based on the
   Assertion ID.  The addition of the validity window relieves the
   authorization server from maintaining an infinite state table of
   processed assertion IDs.
   </t>
</list> 
</t>
</section> 

<section title="Unauthorized Disclosure of Personal Information">

<t>
<list style="hanging"> 
<t hangText="Threat:"><vspace blankLines="1"/>
      The ability for other entities to obtain additional information
      about an individual, such as authentication information, role in an organization or other
      authorization relevant information raises privacy concerns.</t>

	  <t hangText="Countermeasures:"><vspace blankLines="1"/>
      To address the threats two cases need to be differentiated.
	  <vspace blankLines="1"/>

      First, a third party that did not participate in any of the
      exchange is prevented from eavesdropping on the content of the
      assertion by employing confidentiality protection of the HTTP
      signaling exchange using TLS.  This ensures
      that an eavesdropper on the wire is unable to obtain information.
      However, this does not prevent legitimate protocol entities
      from obtaining information assertion they may not have been 
	  allowed to obtain.  
	  <vspace blankLines="1"/>
	  Second, an Authorization Server may obtain an 
	  assertion that was created by a third party token service and that 
	  token service may have placed attributes into the assertion. To 
mitigate potential privacy problems prior consent from the resource owner 
has to be obtained and OAuth itself provides such capabilities but this 
consent approval may be obtained using other identity management protocols 
or in an out-of-band fashion.
<vspace blankLines="1"/> 

      For the cases where a third party token service creates assertions 
for usage with client authentication privacy concerns are typically lower 
since many of these clients are Web servers rather than individual devices 
operated by humans. If the assertions are used for client authentication of 
devices or software that can be closely linked to end users then privacy 
protection safeguards need to be taken into consideration. 
<vspace blankLines="1"/>
Further guidance on privacy friendly protocol design can be found in <xref target="I-D.iab-privacy-considerations"/>. 
 </t>
</list> 
</t>
   

    </section>
</section> 


	        <section title='IANA Considerations'>
	          <section title='assertion Parameter Registration'>
	            <t>
	              The following is the parameter registration request, as
	defined in The OAuth Parameters Registry of <xref
	target="I-D.ietf-oauth-v2">The OAuth 2.0 Authorization
	Protocol</xref>, for the
	              <spanx style='verb'>assertion</spanx> parameter:

	              <list style='symbols'>
	                <t>Parameter name: assertion</t>
	                <t>Parameter usage location: client authentication, token request
	                </t>
	                <t>Change controller: IETF</t>
	                <t>Specification document(s): [[this document]]</t>
	              </list>
	            </t>
	          </section>
	
	          <section title='client_assertion Parameter Registration'>
	            <t>
	              The following is the parameter registration request, as
	defined in The OAuth Parameters Registry of <xref
	target="I-D.ietf-oauth-v2">The OAuth 2.0 Authorization
	Protocol</xref>, for the
	              <spanx style='verb'>client_assertion</spanx> parameter:

	              <list style='symbols'>
	                <t>Parameter name: <spanx style='verb'>client_assertion</spanx></t>
	                <t>Parameter usage location: client authentication, token request
	                </t>
	                <t>Change controller: IETF</t>
	                <t>Specification document(s): [[this document]]</t>
	              </list>
	            </t>
	          </section>
	
	          <section title='client_assertion_type Parameter Registration'>
	            <t>
	              The following is the parameter registration request, as
	defined in The OAuth Parameters Registry of <xref
	target="I-D.ietf-oauth-v2">The OAuth 2.0 Authorization
	Protocol</xref>, for the
	              <spanx style='verb'>client_assertion_type</spanx> parameter:

	              <list style='symbols'>
	                <t>Parameter name: <spanx style='verb'>client_assertion_type</spanx></t>
	                <t>Parameter usage location: client authentication, token request
	                </t>
	                <t>Change controller: IETF</t>
	                <t>Specification document(s): [[this document]]</t>
	              </list>
	            </t>
	          </section>

	        </section>

  </middle>

  <back>                                                                                        
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-v2.xml' ?>
	  
    </references>
	                                              
    <references title="Informative References">
	  <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.iab-privacy-considerations.xml' ?>
	  
 
  </references>
  
    <section title="Acknowledgements">
      <t>The authors wish to thank the following people for their input to the initial design: 
      Paul Madsen, Eric Sachs, Jian Cai, Tony Nadalin, the authors of OAuth WRAP, namely Dick Hardt, 
      Allen Tom, Brian Eaton, and Yaron Goland.</t>
      
      <t>We would also like to thank Dick Hardt for his document review in June 2012.</t>
    </section>

    <section title='Document History'>
      <t>
	[[ to be removed by RFC editor before publication as an RFC ]]
      </t>
	   <t>
        draft-ietf-oauth-assertions-04
        <list style='symbols'>
          <t>updated document to reflect the review comments from the shepherd.</t>
        </list>
      </t>
       <t>
        draft-ietf-oauth-assertions-03
        <list style='symbols'>
          <t>updated reference to draft-ietf-oauth-v2 from -25 to -26</t>
        </list>
      </t>
      <t>
	draft-ietf-oauth-assertions-02
	<list style='symbols'>
	  <t>Added text about limited lifetime ATs and RTs per http://www.ietf.org/mail-archive/web/oauth/current/msg08298.html.</t>
	  <t>Changed the line breaks in some examples to avoid awkward rendering to text format. Also removed encoded '=' padding from a few examples because both known derivative specs, SAML and JWT, omit the padding char in serialization/encoding.</t>
	  <t>Remove section 7 on error responses and move that (somewhat modified) content into subsections of section 4 broken up by authn/authz per http://www.ietf.org/mail-archive/web/oauth/current/msg08735.html.</t>
	  <t>Rework the text about "MUST validate ... in order to establish a mapping between ..." per http://www.ietf.org/mail-archive/web/oauth/current/msg08872.html and http://www.ietf.org/mail-archive/web/oauth/current/msg08749.html.</t>
	  <t>Change "The Principal MUST identify an authorized accessor.  If the
	  assertion is self-issued, the Principal SHOULD be the client_id" in 6.1 per http://www.ietf.org/mail-archive/web/oauth/current/msg08873.html.</t>
	  <t>Update reference in 4.1 to point to 2.3 (rather than 3.2) of oauth-v2 (rather than self) http://www.ietf.org/mail-archive/web/oauth/current/msg08874.html.</t>
	  <t>Move the "Section 3 of" out of the xref to hopefully fix the link in 4.1 and remove the client_id bullet from 4.2 per http://www.ietf.org/mail-archive/web/oauth/current/msg08875.html.</t>
	  <t>Add ref to Section 3.3 of oauth-v2 for scope definition and remove some then redundant text per http://www.ietf.org/mail-archive/web/oauth/current/msg08890.html.</t>
	  <t>Change "The following format and processing rules SHOULD be applied" to "The following format and processing rules apply" in sections 6.x to remove conflicting normative qualification of other normative statements per http://www.ietf.org/mail-archive/web/oauth/current/msg08892.html.</t>
	  <t>Add text the client_id must id the client to 4.1 and remove similar text from other places per http://www.ietf.org/mail-archive/web/oauth/current/msg08893.html.</t>
	  <t>Remove the MUST from the text prior to the HTTP parameter definitions per http://www.ietf.org/mail-archive/web/oauth/current/msg08920.html.</t>
	  <t>Updated examples to use grant_type and client_assertion_type values from the OAuth SAML Assertion Profiles spec.</t>
	</list>
      </t>

    </section>
  </back>
</rfc>
