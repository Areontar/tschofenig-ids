


Network Working Group                                      H. Tschofenig
Internet-Draft                                                  J. Arkko
Intended status: Informational                              D. McPherson
Expires: January 4, 2013                     Internet Architecture Board
                                                            July 3, 2012


        Architectural Considerations in Smart Object Networking
               draft-iab-smart-object-architecture-00.txt

Abstract

   Following the theme "Everything that can be connected will be
   connected", engineers and researchers building smart object networks
   need to decide how to achieve this in practice.  How can different
   forms of embedded and constrained devices be interconnected?  How can
   they employ and interact with the currently deployed Internet?  This
   memo discusses smart objects and some of the architectural choices
   involved in designing smart object networks and protocols that they
   use.

   This writeup describes the IAB's view on these issues.  The document
   is being discussed at
   https://www.ietf.org/mailman/listinfo/architecture-discuss

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 4, 2013.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal



Tschofenig, et al.       Expires January 4, 2013                [Page 1]

Internet-Draft  Smart Object Architectural Considerations      July 2012


   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Protocol Re-Use and Deployment Reality . . . . . . . . . . . .  5
   3.  The Need for Standards and Models for Interoperability . . . .  7
   4.  Recommendations  . . . . . . . . . . . . . . . . . . . . . . . 14
   5.  Security Considerations  . . . . . . . . . . . . . . . . . . . 17
   6.  Privacy Considerations . . . . . . . . . . . . . . . . . . . . 18
   7.  Summary  . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
   8.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 21
   9.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 22
   10. References . . . . . . . . . . . . . . . . . . . . . . . . . . 23
     10.1.  Normative References  . . . . . . . . . . . . . . . . . . 23
     10.2.  Informative References  . . . . . . . . . . . . . . . . . 24
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 26


























Tschofenig, et al.       Expires January 4, 2013                [Page 2]

Internet-Draft  Smart Object Architectural Considerations      July 2012


1.  Introduction

   In [1] we refer to smart objects as devices with energy, bandwidth,
   memory, size, cost, etc. constraints.  This is a fuzzy definition, as
   there is clearly a continuum in device capabilities and there is no
   hard line to draw between devices that can be classified as smart
   objects and those who don't.

   Following the theme "Everything that can be connected will be
   connected", engineers and researchers building smart object networks
   need to decide how to achieve this in practice.  How can different
   forms of embedded and constrained devices be interconnected?  How can
   they employ and interact with the currently deployed Internet?

   These questions have been discussed at length.  For instance, when
   the Internet Architecture Board (IAB) scheduled a workshop on Smart
   Objects, the IETF community was asked to develop views on how
   Internet protocols can be utilized by smart objects.  The workshop
   participants contributed their views on the topic and a report was
   published [1].

   This memo discusses smart objects and some of the architectural
   choices involved in designing smart object networks and protocols
   that they use.  The main issues that we focus on are interaction with
   the Internet, the use of Internet protocols for these applications,
   models of interoperability, and approach to standardization.

   In drawing conclusions from the prior IETF work and from the IAB
   workshop it is useful to look back at the criteria for success of the
   Internet.  Luckily, various publications provide valuable insight
   into the history.  Many of the statements are very much applicable to
   the discussion on smart objects.  RFC 1958 [2] says:

      "The Internet and its architecture have grown in evolutionary
      fashion from modest beginnings, rather than from a Grand Plan.",
      and adds

      "A good analogy for the development of the Internet is that of
      constantly renewing the individual streets and buildings of a
      city, rather than razing the city and rebuilding it."

   Internet protocols are immediately relevant for any smart object
   development and deployment.  However, building very small, often
   battery operated devices is challenging.  It is difficult to resist
   the temptation to build specific solutions tailored to a particular
   application, or to re-design everything from scratch.  Yet, due to
   network effects the case for using the Internet Protocol(s) and other
   generic technology is compelling.



Tschofenig, et al.       Expires January 4, 2013                [Page 3]

Internet-Draft  Smart Object Architectural Considerations      July 2012


   The rest of this document is structured as follows.  Finally,
   Section 4 provides some recommendations from the IAB on how to
   approach these challenges, Section 5 discusses general security
   issues, and privacy issues are discussed in Section 6.

   This writeup describes the IAB's view on these issues.  The document
   is being discussed at
   https://www.ietf.org/mailman/listinfo/architecture-discuss.











































Tschofenig, et al.       Expires January 4, 2013                [Page 4]

Internet-Draft  Smart Object Architectural Considerations      July 2012


2.  Protocol Re-Use and Deployment Reality

   We see the attempt for re-design in many places; sometimes only at
   the marketing level but often also in ignorance of what had been
   developed in the past, and complications realized therein.

   The IETF has produced a number of important specifications that make
   the Internet work.  The Internet protocols are relevant for any smart
   object development and deployment.  In the context of one use case of
   smart objects, the smart grid and smart meters in particular, RFC
   6272 "Internet Protocols for the Smart Grid" [3] identifies a range
   of IETF protocols that can be utilized by those people seeking
   guidance on how to construct an appropriate Internet Protocol Suite
   profile for the Smart Grid.  The wide range of protocols listed in
   that document illustrates the view of the authors about how much can
   be re-used.

   Picking the right protocols for a specific use case can be tricky.
   As the Internet has evolved over time certain protocols and protocol
   extensions cannot be utilized in all circumstances.  The following
   list illustrates a few of those challenges and every communication
   protocol comes with it's own challenges.  As a protocol designer you
   need to be aware of the deployment challenges; it is not enough to
   just look at the specifications.

      In 2005 [13] studied the usage of IP options-enabled packets in
      the Internet and found that overall, approximately half of
      Internet paths drop packets with options making extensions using
      IP options "less ideal" for extending IP.

      In 2010 [14] tested 34 different home gateways regarding their
      packet dropping policy of UDP, TCP, DCCP, SCTP, ICMP, and various
      timeout behavior.  For example, for UDP more than half of the
      tested devices do not conform to the IETF recommended timeouts and
      for TCP the measured timeouts are highly variable, ranging from
      less than 4 mins to longer than 25 hours.  For NAT traversal of
      DCCP and SCTP the situation is poor.  None of the tested devices,
      for eample, allowed establishing a DCCP connection.

      In 2011 [15] tested the behavior of networks with regard to
      various TCP extensions: "From our results we conclude the
      middleboxes implementing layer 4 functionality are very common --
      at least 25% of paths interfered with TCP in some way beyond basic
      firewalling."

   Extending protocols to fulfill new uses and to add new functionality
   may range from very easy to difficult, as [4] investigates in great
   detail.  A challenge many protocol designers are facing is to ensure



Tschofenig, et al.       Expires January 4, 2013                [Page 5]

Internet-Draft  Smart Object Architectural Considerations      July 2012


   incremental deployability and interoperability with incumbent
   elements in a number of areas.  In various cases the effort it takes
   to design incrementally deployable protocols has not been taken
   serious enough at the outset.

   As these examples illustrate, protocol architects have to take
   developments in the greater Internet into account, as not all
   features can be expected to be usable in all environments.  For
   instance, middleboxes [5] complicate the use of extensions in the
   basic IP protocols and transport layers.

   RFC 1958 [2] considers this aspect and says "... the community
   believes that the goal is connectivity, the tool is the Internet
   Protocol, and the intelligence is end to end rather than hidden in
   the network."  This statement is challenged more than ever with the
   perceived need to develop clever intermediaries interacting with dumb
   end devices but we have to keep in mind what RFC 3724 has to say
   about this crucial aspect: "One desirable consequence of the end-to-
   end principle is protection of innovation.  Requiring modification in
   the network in order to deploy new services is still typically more
   difficult than modifying end nodes."  RFC 4924 [6] adds that a
   network that does not filter or transform the data that it carries
   may be said to be "transparent" or "oblivious" to the content of
   packets.  Networks that provide oblivious transport enable the
   deployment of new services without requiring changes to the core.  It
   is this flexibility that is perhaps both the Internet's most
   essential characteristic as well as one of the most important
   contributors to its success.























Tschofenig, et al.       Expires January 4, 2013                [Page 6]

Internet-Draft  Smart Object Architectural Considerations      July 2012


3.  The Need for Standards and Models for Interoperability

   Even where common underlying technology (such as IP) is used, current
   smart object networks often have challenges related to
   interoperability of the entire protocol stack, including application
   behavior.  It is important to make a conscious decision about how
   interoperability is achieved.

   Given the fast speed at which new smart object applications are
   built, it is also important to consider what aspects of them are and
   should be standardized, so that both good interoperability and high
   speed of deployment can be assured.

   It is valuable to look back at earlier IETF publications, for
   example, RFC 1263 [7] considers different protocol design strategies
   and makes an interesting observation about the decision to design new
   protocols from scratch or to design them in a non-backwards
   compatible way based on existing protocols:

      "We hope to be able to design and distribute protocols in less
      time than it takes a standards committee to agree on an acceptable
      meeting time.  This is inevitable because the basic problem with
      networking is the standardization process.  Over the last several
      years, there has been a push in the research community for
      lightweight protocols, when in fact what is needed are lightweight
      standards.  Also note that we have not proposed to implement some
      entirely new set of 'superior' communications protocols, we have
      simply proposed a system for making necessary changes to the
      existing protocol suites fast enough to keep up with the
      underlying change in the network.  In fact, the first standards
      organization that realizes that the primary impediment to
      standardization is poor logistical support will probably win."

   While [7] was written in 1991 where the standardization process in
   the Internet community was far more lightweight than today (among
   other reasons, because fewer stakeholders were interested in
   participating in the standards process) it is remarkable to read
   these thoughts since they are even more relevant today.  Regardless
   how hard we work on optimizing the standard process designing systems
   in a multi-sakeholder consensus process takes longer than letting
   individual stakeholders develop their own proprietary solutions.
   Therefore it is important to make architectural decisions that keep a
   good balance between proprietary developments vs. standardized
   components.  We will discuss this topic in more detail later in this
   document.

   While RFC 1263 [7] certainly provides good food for thought it also
   gives recommendations that may not always be appropriate for the



Tschofenig, et al.       Expires January 4, 2013                [Page 7]

Internet-Draft  Smart Object Architectural Considerations      July 2012


   smart object space, such as the preference for a so-called
   evolutionary protocol design where new versions of the protocols are
   allowed to be non-backwards compatible and all run independently on
   the same device.  RFC 1263 adds:

      "... the only real disadvantage of protocol evolution is the
      amount of memory required to run several versions of the same
      protocol.  Fortunately, memory is not the scarcest resource in
      modern workstations (it may, however, be at a premium in the BSD
      kernel and its derivatives).  Since old versions may rarely if
      ever be executed, the old versions can be swapped out to disk with
      little performance loss.  Finally, since this cost is explicit,
      there is a huge incentive to eliminate old protocol versions from
      the network."

   Even though this is common practice today to run many different
   software applications that have similar functionality (for example,
   multiple Instant Messaging clients) it may indeed not be the most
   preferred approach for smart objects that have severe limitations
   regarding RAM and flash memory, and power constraints.

   To deal with exactly this problem the discussions at the IAB
   workshop, see Section 3.1.2 of [1], revealed the preference of many
   participants to develop domain specific profiles that select a
   minimum sub-set of protocols needed for a specific operating
   environment.  Various standardization organizations and industry fora
   are currently engaged in such an activity of defining their preferred
   profile.  In [16] Arkko, et al. explain how the complexity of such a
   profile heavily depends on the chosen communication architecture and
   suggests one possible profile with limited communication
   capabilities, which also translates into a small code size.
   Ultimately, however, the number of domains where smart objects can be
   used is essentially unbounded and so to are the ever-evolving
   protocols and protocol extensions.  Saying "no" to a new protocol
   stack that only differs in minor ways may be appropriate but could be
   interpreted as blocking innovation and, as RFC 1263 [7] describes it
   nicely "In the long term, we envision protocols being designed on an
   application by application basis, without the need for central
   approval.".  ("Central approval" here refers to the approval process
   that happens in standards developing organizations.)

   So, how can we embrace rapid innovation with distributed developments
   and at the same time accomplish a high level of interoperability?

   Clearly, standardization of every domain specific profile will not be
   the solution.  Many domain specific profiles are optimizations that
   will be already obsoleted by technological developments (e.g., new
   protocol developments,), new security threats, new stakeholders



Tschofenig, et al.       Expires January 4, 2013                [Page 8]

Internet-Draft  Smart Object Architectural Considerations      July 2012


   entering the system or changing needs of existing stakeholders, new
   business models, changed usage patterns, etc.  RFC 1263 [7] states
   the problem succinctly: "The most important conclusion of this RFC is
   that protocol change happens and is currently happening at a very
   respectable clip.  We simply propose to explicitly deal with the
   changes rather keep trying to hold back the flood."

   Even worse, different stakeholders that are part of the Internet
   milieu have interests that may be adverse to each other, and these
   parties each vie to favor their particular interests.  In [17] Clark
   et al. call this process 'the tussle' and ask the important question
   "How can we, as designers, build systems with desired characteristics
   and improve the chances that they come out the way we want?".  In an
   attempt to answer that question they develop a high-level principle:

      "Design for variation in outcome, so that the outcome can be
      different in different places, and the tussle takes place within
      the design, not by distorting or violating it.  Do not design so
      as to dictate the outcome.  Rigid designs will be broken; designs
      that permit variation will flex under pressure and survive."

   In order to accomplish this Clark et al. suggest to

   1.  Break complex systems into modular parts.

   2.  Design for choice

   These are valid guidelines and many protocols standardized in the
   IETF have taken exactly this approach, namely to identify building
   blocks that can be used in a wide variety of deployments.  Others
   then put them together in a way that suites their needs.  There are,
   however, limits to this approach.  Certain building blocks are only
   useful in a limited set of architectural variants and producing
   generic building blocks requires a good understanding of the
   different architectural variants and often limits the ability to
   optimize.  Sometimes the value of an individual building block is
   hard for others to understand without providing the larger context,
   which requires at least to illustrate one architectural variant.
   That said, it is also critical to consider systemic interdependencies
   between the set of elements that constitute a system, else they may
   impose constraints that weren't envisioned at the onset.

   Since many Internet protocols are used as building blocks by other
   organizations and in deployments or that may have never been
   envisioned by the original designs, one can argue that this approach
   has been fairly successful.  It may, however, not lead to the level
   of interoperability many desire: they want interoperability of the
   entire system rather than interoperability at a specific protocol



Tschofenig, et al.       Expires January 4, 2013                [Page 9]

Internet-Draft  Smart Object Architectural Considerations      July 2012


   level.  Consequently an important architectural question arises,
   namely "What level of interoperability should Internet protocol
   engineers aim for?"

   In the diagrams below we illustrate a few interoperability scenarios
   with different interoperability needs.  Note that these are highly
   simplified versions of what protocol architects are faced with since
   there are often more parties involved in a sequence of required
   protocol exchanges, and the entire protocol stack has to be
   considered - not just one layer.  As such, the required coordination
   and agreement between the different stakeholders is likely to be far
   more challenging than illustrated below.  We do, however, believe
   that these figures illustrate that the desired level of
   interoperability needs to be carefully chosen.

   Figure 1 shows a typical deployment of many Internet applications: an
   application service provider (i.e., example.com in our illustration)
   wants to make an application available to its customers and they are
   provided with the application software.  The application works with
   example.com's costumers and with nobody else; there is no
   interoperability with third parties (at the application layer at
   least).  Example.com may still re-use standardized protocol
   components to speed-up the process of developing it's software, which
   is certainly useful from a time-to-market and cost efficiency point
   of view.  Example.com will also have to rely on the underlying
   protocol stack to have their customers access the Internet in order
   to use their application software.



            .................
            |  Application  |
            |  Service      |
            |  Provider     |
            |  Example.com  |
            |_______________|
                _,   .
              ,'      `.      Proprietary
           _,'          `.    Protocol
         ,'               `._
       -'                    -
    ,''''''''|           ,''''''''|  Application
    | Device |           | Device |  provided by
    | 'Foo'  |           | 'Bar'  |  Example.com
    |........'           |........'

                     Figure 1: Proprietary Deployment




Tschofenig, et al.       Expires January 4, 2013               [Page 10]

Internet-Draft  Smart Object Architectural Considerations      July 2012


   In a next step an application service provider, a.example.com in
   Figure 2 wants to provide interworking with other third parties, such
   as b.example.com. a.example.com is still able to enhance software
   provided to its own customers in the speed it feels necessary.
   Typically, the level of standardization between the different
   providers depends on the number of players and their position in the
   market.



                                              .................
                                              |  Application  |
                                             .|  Service      |
                                          ,-` |  Provider     |
                                        .`    | b.example.com |
                                     ,-`      |_______________|
                                   .`
             .................  ,-`           .................
             |  Application  |-`              |  Application  |
             |  Service      |----------------|  Service      |
             |  Provider     |   Standardized |  Provider     |
             | a.example.com |-,     Protocol | c.example.com |
             |_______________|  '.            |_______________|
                  _,              `',
    Proprietary ,'                   '.             ...
    Protocol _,'                       `',    .................
           ,'                             '.  |  Application  |
         -'                                 `'|  Service      |
      ,''''''''|  Device Software             |  Provider     |
      | Device |  provided by                 | z.example.com |
      | 'Foo'  |  a.example.com               |_______________|
      |........'

                    Figure 2: Backend Interoperability

   In our next scenario, as shown in Figure 3, two random devices
   developed by independent software manufacturers are desired to
   interwork.  The number of software manufacturers certainly plays a
   role but quite clearly the need for standardization is quite high.
   To pick an example from [1], consider a lightbulb that talks to a
   light switch with the requirement that each may be manufactured by
   different companies.  Since these are quite constrained devices their
   protocol stack needs to be fully specified.








Tschofenig, et al.       Expires January 4, 2013               [Page 11]

Internet-Draft  Smart Object Architectural Considerations      July 2012


                        _,,,,    ,,,,
                       /     -'``    \
                      |               |
                      \               |
                      /               \
    ,''''''''|       /   Standardized  .       ,''''''''|
    | Device | ------|---Protocol-------\------| Device |
    | 'Foo'  |        .                 |      | 'Bar'  |
    |........'         `'-              /      |........'
                          \      _-...-`
    Independent            `. ,.'              Independent
    Software                 `                 Software
    Manufacturer                               Manufacturer

                      Figure 3: Full Interoperability

   A secondary question, although related to interoperability, concerns
   software updates.  For many reasons, not only for additing new
   functionality, it can be said that many smart objects will need a
   solid software update mechanism.  Regularly uploading new
   functionality to smart objects may not be possible for certain
   classes of constrained devices, namely those with severe memory
   limitations.  For those cases, if possible, the interoperability need
   can be shifted away from the client-to-server interface to the
   backend infrastructure (shown in Figure 2) instead of falling back to
   a model closer to Figure 3.  In such a deployment the application
   service provider offering a specific smart object uses regular IP
   connectivity to upload data to a Web storage.  Then, for interaction
   with other devices or with an end user interested in viewing or
   processing the resulting data the full range of Internet/Web
   capabilities are at their disposal.  For example, when the sensor
   data is to be integrated in a new social network then Web
   functionality can be used to share the data between the different
   sites in a mashup style communication, where the publisher and
   consumer do not transact directly.

   Arguably, the Web today employs extensive software update mechanisms
   with JavaScript but of course it may not be the right choice of
   software distribution for smart objects and other languages like
   embedded Lua [18] may be more appropriate.  The overall concept of
   allowing multiple parties to upload code is nevertheless attractive.
   We would like to stress the multiple party aspect since the interests
   of the different stakeholders involved in offering and using smart
   objects may be diverse.  End users are more likely to have needs that
   are not aligned with those providing the hardware, those developing
   software, those providing access to the Internet, or those who offer
   value-added services. [8] discusses this topic with a focus on mobile
   code distribution using JavaScript and tells an important lesson



Tschofenig, et al.       Expires January 4, 2013               [Page 12]

Internet-Draft  Smart Object Architectural Considerations      July 2012


   applicable also to the smart object area, namely that lowering the
   standardization needs for the client-to-server communication offers a
   number of advantages for application service providers.  Figure 4
   illustrates the architecture graphically where an end device is able
   to use standardized protocols (such as HTTP and JavaScript) to obtain
   dynamically downloaded software components from different application
   providers, which are then executed on the device in an isolated
   fashion (e.g., for security and privacy reasons).



     .................                .................
     |  Application  |                |  Application  |
     |  Service      |                |  Service      |
     |  Provider     |                |  Provider     |
     | a.example.com |                | b.example.com |
     |_______________|                |_______________|
            -,                               _.
              `.,                         _-`
    Standardized ',                    _-`  Standardized
          Protocol `',               ,'  Protocol
                      `.,         _,'
                         ',     ,'
                           `' -'
                        ,''''''''|  Device Software
                        | Device |  dynamically uploaded
                        | 'Foo'  |  by a.example.com or
                        |........'  b.example.com

                    Figure 4: Dynamic Code Distribution





















Tschofenig, et al.       Expires January 4, 2013               [Page 13]

Internet-Draft  Smart Object Architectural Considerations      July 2012


4.  Recommendations

   Based on the previous description we developed suggestions for
   different audiences.

   For engineers in the IETF we suggest to

   o  The IETF has produced a number of building blocks as well as
      architectural specifications that have provided good guidance for
      implementers and the deployment community.  We encourage to
      continue the development of building blocks that are usable in a
      number of deployment scenarios.  A number of the recommendations
      in [1] provide a good starting point.  We do, however, encourage
      protocol engineers to document the interworking of various
      protocols in at least one architectural variant to ensure that the
      indivual parts indeed fit together without creating gaps or
      conflicts.  Regarding architectural documents we believe to
      observe that their number in the IETF has increased over the years
      we are convinced that focusing on a sub-set of the protocol stack
      will be of increased importance for a smart object environment.
      Thereby we suggest to separate profiles that describe network
      layer from application layer protocol interaction due to the
      different speed of innovation, very much in the same style of the
      split between RFC 1122 "Requirements for Internet Hosts -
      Communication Layers" [19] and RFC 1123 "Requirements for Internet
      Hosts - Application and Support" [20].  The application space has
      historically seen faster innovation cycles and separating network
      layer from application layer functionality is therefore suggested.
      In general, we suggest to avoid standardizing complete protocol
      stacks.  The likelihood that those will be out-dated at the time
      when standardization is finished is far too high, particularly
      with application layer standards.

   o  Aim for an architecture with a lower interoperability first.  An
      architecture that requires fewer interoperability components has
      more liklihood for success in the market place.

   o  Even in the smart object space try to aim for a generic design
      instead of optimizing too early.  Note that some optimizations
      will only be possible in an architectural context, rather than at
      the level of an individual protocol.

   o  We encourage engineers to take existing deployment constraints
      into consideration to allow for a smooth transition path.  This
      requires a clear understanding of the deployment status and also
      an analysis of the incentives of the different stakeholders.





Tschofenig, et al.       Expires January 4, 2013               [Page 14]

Internet-Draft  Smart Object Architectural Considerations      July 2012


   o  A wide range of middleboxes have been introduced over the time to
      the Internet protocol suite.  Introducing middleboxes in smart
      object deployments has been proposed many times but their usage
      may turn out to be dangerous.  We recommend it has to be carefully
      investigated whether new features introduced at the communications
      can be supported without any change to middleboxes.  This
      investigation will likely have to go beyond pure specification
      work, and may require extensive interoperability testing and a
      clearly articulated extensiblity story.  The guidance in [4] is
      relevant to this discussion.  The added architectural complexity,
      including security and privacy challenges, has to be a subject of
      design considerations.  Middleboxes are often operated by parties
      other than the communication endpoints.  As such, they introduce
      additional stakeholders into the architecture that often want to
      heard when new features are introduced and as such may slow down
      the ability to innovate at a high speed.

   For researchers in the IRTF we suggest to:

   o  Explore the ability to use mobile code distribution also on smart
      objects.  Take the good experience from the Web environment and
      fix the mistakes.

   o  The IETF has also kept a good balance between standardization work
      that has almost research character (long-term) and deployment
      relevant (short-term) work.  This balance is useful for the
      participants to ensure that forward-looking researchers are
      sharing their views with those closer to deployment problems.  The
      exact worksplit between the IRTF and the IETF community is left to
      the decision of the involved parties.  We encourage to continue
      with this model.

   o  We encourage funding of software projects that produce libraries
      and open source code for smart object operating systems.  The
      success of many IETF protocols can be attributed to the
      availability of running code.

   o  We also propose to conduct ongoing research of the deployment
      status of various Internet protocols.  For example, [Lars's
      publication./Handley] investigate the behavior of home gateways
      ....].  These investigations provide a snapshot for further
      interactions with the operator community to ensure that IETF
      protocols can indeed be deployed in today's Internet and may
      stimulate discussions on how to deal with unpleasant deployment
      artifacts.

   For those trying to re-use IETF protocols for the development of
   their own IP-based smart object architecture we suggest, in addition



Tschofenig, et al.       Expires January 4, 2013               [Page 15]

Internet-Draft  Smart Object Architectural Considerations      July 2012


   to the recommendations in this document, to take the vast number of
   IETF recommendations into consideration.  [Editor's Note: Add an
   example list of recommendation here.]
















































Tschofenig, et al.       Expires January 4, 2013               [Page 16]

Internet-Draft  Smart Object Architectural Considerations      July 2012


5.  Security Considerations

   Section 3.3 of [1] reminds us about the IETF workstyle regarding
   security:

      In the development of smart object applications, as with any other
      protocol application solution, security has to be considered early
      in the design process.  As such, the recommendations currently
      provided to IETF protocol architects, such as RFC 3552 [9], and
      RFC 4101 [10], apply also to the smart object space.

   In the IETF security functionality is incorporated into each and
   every protocol to deal with threats that are specific to them.  It is
   extremely unlikely that there is a one-size-fits-all security
   solution given the large number of choices for the 'right' protocol
   architecture (particularly at the application layer).  For this
   purpose [3] offers a survey of IETF security mechanisms instead of
   suggesting a preferred one.

   A more detailed security discussion can be found in the report from
   the 'Smart Object Security' workshop [TBD] that was held prior to the
   IETF meeting in Paris, March 2012.





























Tschofenig, et al.       Expires January 4, 2013               [Page 17]

Internet-Draft  Smart Object Architectural Considerations      July 2012


6.  Privacy Considerations

   In 1980, the Organization for Economic Co-operation and Development
   (OECD) published eight Guidelines on the Protection of Privacy and
   Trans-Border Flows of Personal Data [21], which are often referred to
   as Fair Information Practices (FIPs).  The FIPs, like other privacy
   principles, are abstract in their nature and have to be applied to a
   specific context.

   From a technical point of view many smart object designs are not
   radically different from other application design.  Often, however,
   the lack of a classical user interface, as known from the desktop PC,
   network, or Internet table, that allows users to interact with the
   devices in a convienent and familiar way creates problems to provide
   users with information about the data collection, and to offer them
   the ability to express consent.  Furthemore, in some verticals (e.g.,
   smart meters deployments) users are not presented with the choice of
   voluntarily signing up for the service but deployments are instead
   mandated through regulation.  Therefore, these users are taken their
   ability to excercise their consent right; a right that is core to
   many privacy principles including the FIPs.  In other cases the
   design is more focused on dealing with privacy at the level of a
   privacy notices rather than by building privacy into the design of
   the system, which [11] asks engineers to do.

   The interoperability models described in this document highlight that
   standardized interfaces are not needed in all cases, a nor that this
   is even desirable.  Depending on the choice of certain underlying
   technologies various privacy problems may be inherited by the upper
   layer protocols and therefore difficult to resolve as an
   afterthought.  Many smart objects leave users little ability for
   enabling privacy-improving configuration changes.  Technologies exist
   that can be applied also to smart objects to involve users in
   authorization decisions before data sharing takes place.

   As a summary, for an Internet protocol architect the guidelines
   described in [11] are applicable.  For those looking at privacy from
   a deployment point of view the following additional guidelines are
   suggested:

   Transparency:  The data processing should be completely transparent
      to the smart object owner and user(s).  Users should be put in a
      position to easily understand what items of personal information
      concerning them are collected and stored, as well for what
      purposes they are sought.






Tschofenig, et al.       Expires January 4, 2013               [Page 18]

Internet-Draft  Smart Object Architectural Considerations      July 2012


   Data Quality:  Smart objects should only store personal data which
      are adequate, relevant and not excessive in relation to the
      purpose(s) for which they are processed.  The use of anonymised
      data should be preferred wherever possible.

   Data Access:  Before deployment starts it is necessary to consider
      who can access the personal data recorded in smart objects and
      under which conditions, particularly with regard to data subjects,
      to whom (in principle) full and free access to his/her own data
      should be recognised.  Appropriate and clear procedures should be
      established in order to allow data subjects to properly exercise
      their rights.  A privacy and data protection impact assessment is
      considered a useful tool for this analysis.

   Data Security:   Standardized data security measures to prevent
      unlawful access, alteration or loss of smart object data need to
      be defined and universally adopted.  Robust cryptographic
      techniques and proper authentication frameworks should be used to
      limit the risk of unintended data transfers or harmful attacks.
      The end-user should be able to verify, in a straight-forward
      manner, that smart objects are in full compliance with these
      standards.





























Tschofenig, et al.       Expires January 4, 2013               [Page 19]

Internet-Draft  Smart Object Architectural Considerations      July 2012


7.  Summary

   Interconnecting smart objects with the Internet creates exciting new
   use cases and engineers are eager to play with small and constrained
   devices.  With various standardization efforts ongoing and the
   impression that smart objects require a new Internet Protocol and
   many new extensions we would like to provide a cautious warning.  We
   believe that protocol architects are best served by the following
   high level guidance:

   o  Most, if not all, smart object deployments should employ the
      Internet protocol suite.  The Internet protocols build on an
      extremely simple basis that can be incorporated to almost any
      environment, and the rest of the suite can be tailored for the
      environment, depending on the application in question.

   o  When connecting smart objects with the Internet take existing
      deployment into consideration.  Assuming an ideal, clean-slate
      deployments is in many cases far too opimistic since already
      available deployed infrastructure is sticky.

   o  Choose the right interoperability model.  Offering
      interoperability between every entity in an architecture may be an
      ideal situation but comes at a high cost.  As such, starting with
      a less ambigious standardization goal may be appropriate,
      particularly for early deployments.

   o  Don't optimize too early.  The constrained nature of smart objects
      invites engineers to invent each and every technique to optimize
      protocols for special use cases.  While some of these
      optimizations may be necessary many of them make the overal design
      complex and the outcome less usable for the generic use case.



















Tschofenig, et al.       Expires January 4, 2013               [Page 20]

Internet-Draft  Smart Object Architectural Considerations      July 2012


8.  IANA Considerations

   This document does not require actions by IANA.
















































Tschofenig, et al.       Expires January 4, 2013               [Page 21]

Internet-Draft  Smart Object Architectural Considerations      July 2012


9.  Acknowledgements

   We would like to thank the participants of the IAB Smart Object
   workshop for their input to the overall discussion about smart
   objects.

   Furthermore, we would like Atte Lansisalmi, Hannu Flinck, and Markku
   Tuohino for their review comments.











































Tschofenig, et al.       Expires January 4, 2013               [Page 22]

Internet-Draft  Smart Object Architectural Considerations      July 2012


10.  References

10.1.  Normative References

   [1]   Tschofenig, H. and J. Arkko, "Report from the 'Interconnecting
         Smart Objects with the Internet' Workshop, 25th March 2011,
         Prague", draft-iab-smart-object-workshop-10 (work in progress),
         January 2012.

   [2]   Carpenter, B., "Architectural Principles of the Internet",
         RFC 1958, June 1996.

   [3]   Baker, F. and D. Meyer, "Internet Protocols for the Smart
         Grid", RFC 6272, June 2011.

   [4]   Carpenter, B., Aboba, B., and S. Cheshire, "Design
         Considerations for Protocol Extensions",
         draft-iab-extension-recs-17 (work in progress), June 2012.

   [5]   Carpenter, B. and S. Brim, "Middleboxes: Taxonomy and Issues",
         RFC 3234, February 2002.

   [6]   Aboba, B. and E. Davies, "Reflections on Internet
         Transparency", RFC 4924, July 2007.

   [7]   O'Malley, S. and L. Peterson, "TCP Extensions Considered
         Harmful", RFC 1263, October 1991.

   [8]   Tschofenig, H., Aboba, B., Peterson, J., and D. McPherson,
         "Trends in Web Applications and the Implications on
         Standardization", draft-tschofenig-post-standardization-02
         (work in progress), May 2012.

   [9]   Rescorla, E. and B. Korver, "Guidelines for Writing RFC Text on
         Security Considerations", BCP 72, RFC 3552, July 2003.

   [10]  Rescorla, E. and IAB, "Writing Protocol Models", RFC 4101,
         June 2005.

   [11]  Cooper, A., Tschofenig, H., Aboba, B., Peterson, J., and J.
         Morris, "Privacy Considerations for Internet Protocols",
         draft-iab-privacy-considerations-02 (work in progress),
         March 2012.

   [12]  Thaler, D. and B. Aboba, "What Makes For a Successful
         Protocol?", RFC 5218, July 2008.





Tschofenig, et al.       Expires January 4, 2013               [Page 23]

Internet-Draft  Smart Object Architectural Considerations      July 2012


10.2.  Informative References

   [13]  Fonseca, R., Porter, G., Katz, R., Shenker, S., and I. Stoica,
         "IP options are not an option, Technical Report UCB/EECS",
         2005.

   [14]  Eggert, L., "An experimental study of home gateway
         characteristics, In Proceedings of the '10th annual conference
         on Internet measurement'", 2010.

   [15]  Honda, M., Nishida, Y., Greenhalgh, A., Handley, M., and H.
         Tokuda, "Is it Still Possible to Extend TCP? In Proc. ACM
         Internet Measurement Conference (IMC), Berlin, Germany",
         Nov 2011.

   [16]  Arkko, J., Rissanen, H., Loreto, S., Turanyi, Z., and O. Novo,
         "Implementing Tiny COAP Sensors",
         draft-arkko-core-sleepy-sensors-01 (work in progress),
         July 2011.

   [17]  Clark, D., Wroslawski, J., Sollins, K., and R. Braden, "Tussle
         in Cyberspace: Defining Tomorrow's Internet, In Proc. ACM
         SIGCOMM", 2002.

   [18]  "Embedded Lua Project", 2012.

   [19]  Braden, R., "Requirements for Internet Hosts - Communication
         Layers", STD 3, RFC 1122, October 1989.

   [20]  Braden, R., "Requirements for Internet Hosts - Application and
         Support", STD 3, RFC 1123, October 1989.

   [21]  Organization for Economic Co-operation and Development, "OECD
         Guidelines on the Protection of Privacy and Transborder Flows
         of Personal Data", available at (September 2010) , http://
         www.oecd.org/EN/document/
         0,,EN-document-0-nodirectorate-no-24-10255-0,00.html, 1980.

   [22]  Shelby, Z., Hartke, K., Bormann, C., and B. Frank, "Constrained
         Application Protocol (CoAP)", draft-ietf-core-coap-10 (work in
         progress), June 2012.

   [23]  Bormann, C., "Guidance for Light-Weight Implementations of the
         Internet Protocol Suite", draft-bormann-lwig-guidance-01 (work
         in progress), January 2012.

   [24]  Rosenberg, J., "UDP and TCP as the New Waist of the Internet
         Hourglass", draft-rosenberg-internet-waist-hourglass-00 (work



Tschofenig, et al.       Expires January 4, 2013               [Page 24]

Internet-Draft  Smart Object Architectural Considerations      July 2012


         in progress), February 2008.

   [25]  Tschofenig, H. and B. Aboba, "The 10 Laws of Smart Object
         Security Design, In Proc. of IAB Workshop on 'Interconnecting
         Smart Objects with the Internet', Prague, Czech Repulic",
         March 2011.













































Tschofenig, et al.       Expires January 4, 2013               [Page 25]

Internet-Draft  Smart Object Architectural Considerations      July 2012


Authors' Addresses

   Hannes Tschofenig
   Internet Architecture Board
   Linnoitustie 6
   Espoo  02600
   Finland

   Phone: +358 (50) 4871445
   Email: Hannes.Tschofenig@gmx.net
   URI:   http://www.tschofenig.priv.at


   Jari Arkko
   Internet Architecture Board
   Jorvas  02420
   Finland

   Email: jari.arkko@piuha.net


   Danny McPherson
   Internet Architecture Board
   US

   Email: danny@tcb.net

























Tschofenig, et al.       Expires January 4, 2013               [Page 26]

