<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 PUBLIC '' 
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
  <!ENTITY RFC3447 PUBLIC '' 
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml'>
  <!ENTITY RFC4492 PUBLIC '' 
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4492.xml'>
  <!ENTITY RFC5246 PUBLIC '' 
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml'>
  <!ENTITY RFC3280 PUBLIC '' 
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3280.xml'>
  <!ENTITY RFC4880 PUBLIC '' 
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4880.xml'>      
  <!ENTITY RFC6091 PUBLIC '' 
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6091.xml'>  
  <!ENTITY RFC6066 PUBLIC '' 
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6066.xml'>  
  <!ENTITY RFC3874 PUBLIC '' 
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3874.xml'>  
  <!ENTITY RFC1321 PUBLIC '' 
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1321.xml'>  
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="no"?>
<?rfc toc="yes"?>
<?rfc tocompact="no"?>
<?rfc tocdepth="6"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc category="std" ipr="trust200902" docName="draft-wouters-tls-rawkeys-00.txt">
  <front>
    <title abbrev="TLS Raw Public Keys">Raw Public Keys for (Datagram) Transport Layer Security </title>

    <author fullname="Paul Wouters" initials="P." surname="Wouters" role="editor">
      <organization>Xelerance</organization>
      <address>
        <postal>
          <street>4130 Ramsayville Road</street>
          <city>Ottawa</city>
          <region>On</region>
          <code>K1G 3N4</code>
          <country>Canada</country>
        </postal>
        <phone>+1-647-722-5653</phone>
        <email>paul@xelerance.com</email>
        <uri>https://www.xelerance.com/</uri>
      </address>
    </author>

    <author fullname="John Gilmore" initials="J." surname="Gilmore">
      <organization></organization>
      <address>
        <postal>
          <street>PO Box 170608</street>
          <city>San Francisco</city>
          <region>California</region>
          <code>94117</code>
          <country>USA</country>
        </postal>
        <phone>+1 415 221 6524</phone>
        <email>gnu@toad.com</email>
        <uri>https://www.toad.com/</uri>
      </address>
    </author>

    <author fullname="Sam Weiler" initials="S." surname="Weiler">
      <organization>SPARTA, Inc.</organization>
      <address>
        <postal>
          <street>7110 Samuel Morse Drive</street>
          <city>Columbia, Maryland</city>
          <code>21046</code>
          <country>US</country>
        </postal>
        <email>weiler@tislabs.com</email>
      </address>
    </author>

 <author initials="T." surname="Kivinen" fullname="Tero Kivinen">
            <organization>AuthenTec</organization>
            <address>
                <postal>
                    <street>Eerikinkatu 28</street>
                    <city>HELSINKI</city>
                    <code>FI-00180</code>
                    <country>FI</country>
                </postal>
                <email>kivinen@iki.fi</email>
            </address>
        </author>
        <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
            <organization>Nokia Siemens Networks</organization>
            <address>
                <postal>
                    <street>Linnoitustie 6</street>
                    <city>Espoo</city>
                    <code>02600</code>
                    <country>Finland</country>
                </postal>
                <phone>+358 (50) 4871445</phone>
                <email>Hannes.Tschofenig@gmx.net</email>
                <uri>http://www.tschofenig.priv.at</uri>
            </address>
        </author>
    <date year="2011" />
    <area>Security</area>

    <abstract>
      <t>
This document describes a mechanism for exchanging raw public keys and their fingerprints in Transport Layer Security (TLS). 
The main use case of the provided functionality is in the area of TLS and Datagram TLS (DTLS) when used with devices in a constrained environment, as it is the case with sensors and other embedded devices that are constrained by memory, computational, and communication limitations. </t>
    </abstract>
  </front>
  
  <middle>
  
      <!-- **************************************************************************************** -->

    <section title="Introduction">

<t>The IETF has two sets of standards for public key certificates, one
   set for use of X.509 certificates <xref target="RFC3280"/> and one for OpenPGP
   certificates <xref target="RFC4880"/>. Transport Layer Security (TLS) standards
   were initially defined to use only X.509 certificates but were later extended with RFC 6091 <xref target="RFC6091"/> to also allow clients and servers to negotiate the
   use of OpenPGP certificates for a TLS session, and to
   transport OpenPGP certificates via TLS.
   </t>
  <t>Traditionally, TLS server public keys are obtained in PKIX containers
          in-band using the TLS connection and validated using trust anchors
          based on a  <xref target='PKIX'/> certification authority (CA). This
          method can add a complicated trust relationship that is difficult
          to validate. Examples of such complexity can be seen in
          <xref target='Defeating-SSL'/>.</t>

       <t>Alternative methods are available that allow a TLS client to obtain
          the TLS server public key:</t>

       <t><list style="symbols">
          <t>The TLS server public key is obtained from a <xref target='PKIX'/>
             certificate chain from an <xref target="LDAP"/> server.</t>

          <t>The TLS server public key is obtained from a DNSSEC secured RRset
             using DANE <xref target='DANE'/>.</t>

          <t>The TLS server public key is provisioned by the operating system
             and updated via software updates.</t>

          <t>A TLS client has connected to the TLS server before and has cached
             the TLS server certificate chain or TLS server public key for re-use.</t>
          </list>
       </t>

       <t> RFC 5246 <xref target='RFC5246'/> does not provide a mechanism for a TLS client
          to tell the TLS server it is already in possession of the authenticated
          public key. Therefore, a TLS server must always send a list of trusted
          CA keys and its EE certificate containing its public key, even when
          the TLS client does not require or desire that data for authentication.</t>

       <t>RFC 6066 <xref target='RFC6066'/> allows suppression of the certificate trust
          anchor chain, but not suppression of the PKIX EE certificate container.
          These certificate chains are large opague blocks of data containing
          much more then the public key of the TLS server. Since the TLS client
          might only be able to validate the PKIX SubjectPublicKeyInfo via an
          out-of-band method, it has to explicitly forget any additional
          information received that was sent by the server that it could not
          validate. Furthermore, information that comes in via these certificate
          chains could contain contradicting or additional information that the
          TLS client cannot validate or trust, such as an expiry date that
          conflicts with information obtained from DNS or LDAP. This document
          specifies a method to suppress sending this additional information.</t>
   <t>
 This document
   specifies a way to negotiate the use of raw public keys for a
   TLS (and DTLS) session, and specifies how to transport these raw public keys (or their fingerprints) via
   TLS.  The proposed extensions are backward-compatible with the
   current TLS specification, so that existing client and server
   implementations that make use of X.509 certificates are not affected.
   </t>
   <t>
The main use case of the provided functionality is in the area of TLS and Datagram TLS (DTLS) when used with devices in a constrained environment, as it is the case with sensors and other embedded devices that 
that are constrained by memory, computational, and communication limitations.</t>

<t>Imagine a small embedded device that interacts with a Web server to upload temperature sensor readings at a regular interval. The software stack uses the Constrained Application Protocol (CoAP),  a specialized web transfer protocol for use with constrained networks
   and nodes for machine-to-machine applications. CoAP is a UDP-based protocol that can utilize DTLS for its commuication security. As part of the provisioning procedure the embeded device is configured with the address of a dedicated CoAP server to upload sensor data. For security purposes the public keys are also pre-configured on both devices and the CoAP server is likely to use the provisioned public keys of the embedded devices for access control purposes.</t>

<t>For packet size reasons and because of the constrained nature of the sensor networking deployment environment with the pre-configured client-server setup the usage of X.509 or PGP certificates represents an unnecessary burden for implementers as well as for those who deploy.</t>

<!-- <t>In support of this functionality this document introduces two new certificate type extensions to carry raw public keys, and hashes of raw public keys to be exchanged between the client and the server. 
</t>--> 
</section> 

    <!-- **************************************************************************************** -->

    <section title="Terminology">
      <t>
	The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
	NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
	"OPTIONAL" in this document are to be interpreted as described
	in RFC 2119 <xref target="RFC2119"/>.
      </t>
         </section>
    
    <!-- **************************************************************************************** -->
    
    <section title="Changes to the Handshake Message Contents">

  <t>
   This section describes the changes to the TLS handshake message
   contents when raw public keys are to be used for authentication.
  </t>
  
  <section title="Client Hello">

   <t>
   In order to indicate the support of multiple certificate types,
   clients MUST include an extension of type "cert_type" to the extended
   client hello message.  The "cert_type" TLS extension, which is defined 
   in RFC 6091 <xref target="RFC6091"/>, is assigned the
   value of 9 from the TLS ExtensionType registry.  This value is used
   as the extension number for the extensions in both the client hello
   message and the server hello message.  The hello extension mechanism
   is described in <xref target="RFC5246"/>.
   </t>

   <t>
   The "cert_type" TLS extension carries a list of supported certificate types the
   client can use, sorted by client preference.  This extension MUST be
   omitted if the client only supports X.509 certificates.  The
   "extension_data" field of this extension contains a
   CertificateTypeExtension structure.  Note that the
   CertificateTypeExtension structure is being used both by the client
   and the server, even though the structure is only specified once in
   this document.  Reusing a single specification for both client and
   server is common TLS protocol design practice.
   </t>
<t>The RFC 6091 <xref target="RFC6091"/> defined CertificateTypeExtension is extended 
as follows:
<figure>
<artwork> 
<![CDATA[    
enum { client, server } ClientOrServerExtension;

enum { X.509(0), OpenPGP(1), 
   RawPublicKey(2), Fingerprint_RawPublicKey(3), 
   (255) } CertificateType;

struct {
   select(ClientOrServerExtension) 
       case client:
         CertificateType certificate_types<1..2^8-1>;
       case server:
         CertificateType certificate_type;
   }
} CertificateTypeExtension;
]]> 
</artwork>
</figure>
</t> 

<t>No new cipher suites are required to use raw public keys or fingerprints of raw public keys.  All
   existing cipher suites that support a key exchange method compatible
   with the defined extension can be used.</t>

</section> 

<section title="Server Hello">

<t>If the server receives a client hello that contains the "cert_type"
   extension and chooses a cipher suite 
   then two outcomes are possible.  The server MUST either select a
   certificate type from the certificate_types field in the extended
   client hello or terminate the session with a fatal alert of type
   "unsupported_certificate".</t>

<t>The certificate type selected by the server is encoded in a
   CertificateTypeExtension structure, which is included in the extended
   server hello message using an extension of type "cert_type".  Servers
   that only support X.509 certificates MAY omit including the
   "cert_type" extension in the extended server hello.
</t>

</section> 

<section title="Server Certificate Payload Content">

<t>In TLS the contents of the certificate message sent from server to client
   and vice versa are determined by the negotiated certificate type and
   the selected cipher suite's key exchange algorithm.</t>

<t>If the Raw Public Key certificate type (or the fingerprinted version of it) 
   is negotiated, then it is required to present the raw public key 
   (or of the fingerprint of it) in the certificate message.  The
   public key MUST match the selected key exchange algorithm, 
   as shown below. This document defines new certificate types that carry 
   raw public keys and the fingerprinted version.</t>

<t>
<figure>
<artwork> 
<![CDATA[    
Key Exchange Algorithm  |  Type of Public Key
------------------------+--------------------
RSA, DHE_RSA, DH_RSA,   |  RSA public key
ECDH_RSA, ECDHE_RSA)    |  
------------------------+--------------------
DHE_DSS, DH_DSS         |  DSA public key
------------------------+--------------------                     
ECDH_ECDSA, ECDHE_ECDSA |  ECC public key                        
------------------------+--------------------                     
]]> 
</artwork>
</figure>
</t> 

<t>The content of the certificate payload sent by the server depends on the chosen 
type of public key crypto system. Details can be found in <xref target="cert"/>.</t>

</section> 

<section title="Certificate Request">

<t>
   The semantics of this message remain the same as in the TLS
   specification.  However, if this message is sent, and the negotiated
   certificate type is RawPublicKey (or Fingerprint_RawPublicKey), 
   the "certificate_authorities" list MUST be empty.
</t>

</section> 

<section title="Client Certificate Payload Content">

<t>
   This message is only sent in response to the certificate request
   message.  The client certificate message is sent using the same
   formatting as the server certificate message, and it is also required
   to present a certificate extension payload that matches the negotiated certificate
   type.  If the RawPublicKey (or the Fingerprint_RawPublicKey) certificate type has been selected and no public key
    from the client is available, then the server SHOULD respond with a 
    "handshake_failure" fatal alert if the public key cannot be obtained out-of-band.
</t>

<t>The content of the certificate payload sent by the client depends on the chosen 
type of public key crypto system. Details can be found in <xref target="cert"/>.</t>

</section> 

<section title="Other Handshake Messages">

<t>All the other handshake messages are identical to the TLS
   specification.</t>

</section> 

</section> 

    <!-- **************************************************************************************** -->
    
    <section anchor="cert" title="Certificate Payloads">

<t>The authors of this document suggest to convey raw public keys (and fingerprints of raw public keys) in Certificate payloads and this section defines the structure of these payloads.</t>

<section title="Raw Public Keys"> 

<t>
<figure anchor="cert-structure" title="Content of the Certificate Payload">
<artwork> 
<![CDATA[    
      enum { 
      	SHA-1(0)
      	SHA-224(1), 
      	SHA-256(2), 
      	SHA-384(3), 
      	SHA-512(4), 
      	MD5(5)
      } FingerprintHashFunction;

      enum {
           empty_key(1),
           raw_key(2),
           raw_key_fingerprint(3),
           (255)
      } DescriptorType;

      struct {
          opaque KeyID<8..255>;
      } EmptyKey_Structure;

      struct {
          opaque KeyID<8..255>;
          opaque RawKey<0..2^24-1>;
      } RawPublicKey_Structure;

      struct {
          opaque KeyID<8..255>;
          opaque RawKeyFingerprint<20..255>;
          FingerprintHashFunction fingerprintHashFunction; 
      } RawPublicKey_Fingerprint_Structure;

      struct {
           DescriptorType descriptorType;
           select (descriptorType) {
                case empty_key: EmptyKey;
                case raw_key: RawPublicKey_Structure;
                case raw_key_fingerprint:
                    RawPublicKey_Fingerprint_Structure;
           }
      } Certificate;
]]> 
</artwork>
</figure>
</t> 

<t>The fields are defined as follows: 

<list style="hanging"> 

<t hangText="KeyID:"> <vspace blankLines="1"/>
The KeyID structure contains an identifier for the key structure. No specific syntax or content is mandated by this document.
<vspace blankLines="1"/></t> 

<t hangText="RawKeyFingerprint:"> <vspace blankLines="1"/>
The RawKeyFingerprint structure carries the hash of the raw public key.<vspace blankLines="1"/></t> 

<t hangText="FingerprintHashFunction:"> <vspace blankLines="1"/>
The FingerprintHashFunction structure explicitly states the hash function used for computing the fingerprint of the raw public key. More information about the computation can be found in <xref target="fingerprint"/>.<vspace blankLines="1"/></t>

<t hangText="RawKey:"><vspace blankLines="1"/>
The RawKey structure contains the raw public key as described below for the different types of public key cryptosystems.</t>

</list> 
</t>

<!-- oooooooooooooooooooooo -->

<t>
<list style="hanging"> 
<t hangText="RSA Public Key: "><vspace blankLines="1"/> The raw RSA public key contains a PKCS #1 encoded RSA key, that is, a DER-encoded RSAPublicKey structure (see <xref target="RSA"/> and <xref target="RFC3447"/>).</t>
</list> 
</t>

 <!-- oooooooooooooooooooooo -->

<t>
<list style="hanging"> 
<t hangText="Diffie-Hellman Public Key:"> <vspace blankLines="1"/> This payload defines a raw Diffie-Hellman (DH) public key and parameters.
<figure> 
<artwork> 
<![CDATA[
   struct {
          opaque dh_p<1..2^16-1>;
          opaque dh_g<1..2^16-1>;
          opaque dh_Ys<1..2^16-1>;
      } DHParams;     /* DH parameters */

      dh_p
         The prime modulus used for the Diffie-Hellman operation.

      dh_g
         The generator used for the Diffie-Hellman operation.

      dh_Ys
         The server's Diffie-Hellman public value (g^X mod p).
]]> 
</artwork>
</figure>
</t> 
</list> 
</t>

 <!-- oooooooooooooooooooooo -->

<t>
<list style="hanging"> 
<t hangText="Raw ECC Public Key:"><vspace blankLines="1"/>  This payload defines a raw Elliptic Curve Cryptography (ECC) public key. The encoding and the parameters of the ECC public key and parameters are defined in Section 5.4 of RFC 4492 <xref target="RFC4492"/> with 'curve_params' specifying the elliptic curve domain parameters associated with the public key and with 'public' representing the public key itself.

<figure> 
<artwork> 
<![CDATA[
       struct {
            ECParameters    curve_params;
            ECPoint         public;
        } ECCParam;
]]> 
</artwork>
</figure>
</t> 

</list> 
</t>

 <!-- oooooooooooooooooooooo -->

<t>
<list style="hanging"> 
<t hangText="DSS Public Key:"><vspace blankLines="1"/>This payload defines a raw Digital Signature Standard (DSS) public key. The encoding and the parameters of the DSS public key and parameters are defined in FIPS 186-3 <xref target="DSS"/>.
The domain_parameter_seed and counter values that were used to generate p and q are not carried in the structure. 

<figure> 
<artwork> 
<![CDATA[
       struct {
          opaque p<1..2^16-1>;
          opaque q<1..2^16-1>;
          opaque g<1..2^16-1>;
        } DSSParam; /* DSS parameters */
]]> 
</artwork>
</figure>
</t> 
</list> 
</t>

</section> 


<section anchor="fingerprint" title="Fingerprint of Raw Public Key"> 

<t>The fingerprint value for the RawKeyFingerprint structure is a hash computed as follows: 
<figure> 
<artwork> 
<![CDATA[
RawKeyFingerprint = func(RawKey)

whereby 
  
  - the func() is the hash function indicated in 
    FingerprintHashFunction (e.g., SHA-256)
  - RawKey is the value of the public key 
    with the encoding defined in this document.
]]> 
</artwork>
</figure>
</t>    

<t>This document defines the following hash functions: 
<list style="symbols"> 
   <t>SHA-1: NIST FIPS PUB 180-3 <xref target="SHA"/></t>
   <t>SHA-224: RFC 3874 <xref target="RFC3874"/></t>
   <t>SHA-256: NIST FIPS PUB 180-3 <xref target="SHA"/></t>
   <t>SHA-384: NIST FIPS PUB 180-3 <xref target="SHA"/></t>
   <t>SHA-512: NIST FIPS PUB 180-3 <xref target="SHA"/></t>
   <t>MD5: RFC 1321 <xref target="RFC1321"/></t>
</list> 
</t> 

</section> 

</section> 

    
        <!-- **************************************************************************************** -->
      
    <section title="Security Considerations">
    <t>This document defines an extension to TLS and therefore inherits 
    the security considerations from TLS as described in <xref target="RFC5246"/> 
    and <xref target="RFC6066"/>.</t>
    
    <t>The protocol for certificate type negotiation is identical in
   operation to cipher suite negotiation as described in the TLS
   specification <xref target="RFC5246"/>, with the addition of default 
   values when the
   extension is omitted.  Since those omissions have a unique meaning
   and the same protection is applied to the values as with cipher
   suites, it is believed that the security properties of this
   negotiation are the same as with cipher suite negotiation.</t>

   <t>Raw public keys and fingerprints of them are, unlike certificates, 
   not secured by their own cryptographic mechanism against modification. 
   As such, this extension assumes that there was an out-of-band procedure 
   to ensure that the public keys (or their fingerprints) have been securely 
   provisioned. This is not only important from an authentication point of view 
   but also with respect to the authorization procedure.</t>
   
   <t> The information that is available to participating parties and
   eavesdroppers (when confidentiality is not available through a
   previous handshake) is the number and the types of certificates they
   hold, plus the contents of certificates.</t>
    </section>

    <!-- **************************************************************************************** -->

    <section title="IANA Considerations">
      <t>With this document IANA is kindly asked to add values to one existing registry.</t>
      
      <section title="New TLS Certificate Types"> 
      
        <t>The "TLS Certificate Types" registry was created with RFC 6091 <xref target="RFC6091"/> and this document defines two new values, namely RawPublicKey([TBD: Suggested value is 2]), and Fingerprint_RawPublicKey([TBD: Suggested value is 3]). </t>      
        
      </section> 
      
    </section>
    
        <!-- **************************************************************************************** -->

    <section title="Acknowledgements">
      <t>
We would like to thank the participants of the CORE and TLS working group session at IETF#81 for their discussions around raw public keys in TLS/DTLS. Additionally we would like to thank Pasi Eronen for his review comments and the authors of RFC 6091 since this documents builds on their work.
      </t>
    </section> 
  </middle>
  
  <back>
    <references title="Normative References">
      &RFC2119;
      &RFC3447;
      &RFC4492;
      &RFC5246; 
      &RFC6066;
      &RFC1321;
      &RFC3874;
      &RFC6091;
      			<reference anchor="RSA">
                <front>
                    <title>A Method for Obtaining Digital Signatures and Public-Key Cryptosystems</title>
                  
                    <author initials="R." surname="Rivest" fullname="R. Rivest">
                        <organization/>
                    </author>
                    <author initials="A." surname="Shamir" fullname="A. Shamir">
                        <organization/>
                    </author>
                    <author initials="L." surname="Adleman" fullname="L. Adleman">
                        <organization/>
                    </author>

                    <date month="February" year="1978"/>
                </front>
            </reference>
            
            
            
            <reference anchor="SHA">
                <front>
                    <title>Federal Information Processing Standards Publication (FIPS PUB) 180-3, Secure Hash Standard (SHS)</title>
                    <author initials="" surname="" fullname="NIST">
                        <organization/>
                    </author>
                    <date month="October" year="2008"/>
                </front>
            </reference>
            
            
            
             <reference anchor="DSS">
                <front>
                    <title>FIPS PUB 186-3, "Digital Signature Standard",
               National Institute of Standards and Technology, U.S.
               Department of Commerce</title>
                    <author initials="" surname="" fullname="NIST">
                        <organization/>
                    </author>
                    <date month="June" year="2009"/>
                </front>
            </reference>
            
            
            
            <reference anchor='PKIX'>
      <front>
      <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
      <author initials='D.' surname='Cooper' fullname='D. Cooper'>
      <organization /></author>
      <author initials='S.' surname='Santesson' fullname='S. Santesson'>
      <organization /></author>
      <author initials='S.' surname='Farrell' fullname='S. Farrell'>
      <organization /></author>
      <author initials='S.' surname='Boeyen' fullname='S. Boeyen'>
      <organization /></author>
      <author initials='R.' surname='Housley' fullname='R. Housley'>
      <organization /></author>
      <author initials='W.' surname='Polk' fullname='W. Polk'>
      <organization /></author>
      <date year='2008' month='May' />
      <abstract>
         <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices. [STANDARDS TRACK]</t></abstract></front>
      <seriesInfo name='RFC' value='5280' />
      <format type='TXT' octets='352580' target='ftp://ftp.isi.edu/in-notes/rfc5280.txt' />
   </reference>
         </references>
         
 <references title="Informative References">
&RFC3280;
&RFC4880;
  <reference anchor='LDAP'>
      <front>
      <title>Lightweight Directory Access Protocol (LDAP): The Protocol</title>
      <author initials='J.' surname='Sermersheim' fullname='J. Sermersheim'>
      <organization /></author>
      <date year='2006' month='June' />
      <abstract>
         <t>This document describes the protocol elements, along with
         their semantics and encodings, of the Lightweight Directory
         Access Protocol (LDAP).  LDAP provides access to distributed
         directory services that act in accordance with X.500 data
         and service models.  These protocol elements are based
         on those described in the X.500 Directory Access Protocol
         (DAP). [STANDARDS TRACK]</t>
       </abstract>
      </front>
      <seriesInfo name='RFC' value='4511' />
      <format type='TXT' octets='150116' target='ftp://ftp.isi.edu/in-notes/rfc4511.txt' />
   </reference>
   
   <reference anchor='DANE'> 
      <front> 
      <title>Using Secure DNS to Associate Certificates with Domain Names For TLS</title> 
      <author initials='P' surname='Hoffman' fullname='Paul Hoffman'> 
      <organization /> 
      </author> 
      <author initials='J' surname='Schlyter' fullname='J. Schlyter'> 
      <organization /> 
      </author> 
      <date month='July' day='1' year='2011' /> 
      <abstract><t>TLS and DTLS use certificates for authenticating the server.  Users
       want their applications to verify that the certificate provided by
       the TLS server is in fact associated with the domain name they
       expect.  DNSSEC provides a mechanism for a zone operator to sign DNS
       information directly.  This way, bindings of keys to domains are
       asserted not by external entities, but by the entities that operate
       the DNS.  This document describes how to use secure DNS to associate
       the TLS server's certificate with the intended domain name.</t></abstract> 
      </front> 
      <seriesInfo name='Internet-Draft' value='draft-ietf-dane-protocol-08' /> 
      <format type='TXT' 
            target='http://www.ietf.org/internet-drafts/draft-ietf-dane-protocol-08.txt' /> 
   </reference> 

    <reference anchor='Defeating-SSL' target='http://www.blackhat.com/presentations/bh-dc-09/Marlinspike/BlackHat-DC-09-Marlinspike-Defeating-SSL.pdf'>
       <front>
       <title>New Tricks for Defeating SSL in Practice</title>
       <author initials='M.' surname='Marlinspike' fullname='Moxie Marlinspike'>
       <organization /></author>
       <date year='2009' month='February' />
       </front>
       <format type='PDF' target='http://www.blackhat.com/presentations/bh-dc-09/Marlinspike/BlackHat-DC-09-Marlinspike-Defeating-SSL.pdf' />
    </reference>

    </references>
  
  </back>
</rfc>
