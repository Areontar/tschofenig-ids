<?xml version="1.0" encoding="us-ascii"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC7258 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7258.xml">
  <!ENTITY RFC5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
  <!ENTITY RFC0793 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0793.xml">
  <!ENTITY RFC7252 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7252.xml">
  <!ENTITY I-D.ietf-tls-applayerprotoneg SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-tls-applayerprotoneg.xml">
]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc strict="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="2"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="std" docName="draft-tschofenig-core-coap-tcp-tls-02.txt" ipr="trust200902">

  <front>
    <title abbrev="TCP/TLS Transport for CoAP">A TCP and TLS Transport for the Constrained Application Protocol (CoAP)</title>

<author initials="S.L." surname="Lemay" fullname="Simon Lemay">
  <organization>Zebra Technologies</organization>
  <address>
    <postal>
      <street>820 W. Jackson Blvd.suite 700</street>
      <city>Chicago</city>
      <code>60607</code>
      <country>United States of America</country>
    </postal>
    <phone>+1-847-634-6700</phone>
    <email>slemay@zebra.com</email>
  </address>
</author>

<author initials="V.S.B." surname="Solorzano Barboza" fullname="Valik Solorzano Barboza">
  <organization>Zebra Technologies</organization>
  <address>
    <postal>
      <street>820 W. Jackson Blvd. suite 700</street>
      <city>Chicago</city>
      <code>60607</code>
      <country>United States of America</country>
    </postal>
    <phone>+1-847-634-6700</phone>
    <email>vsolorzanobarboza@zebra.com</email>
 </address>
</author>

    <author role="editor" initials="H.T." surname="Tschofenig" fullname="Hannes Tschofenig ">
      <organization>ARM Ltd.</organization>
      <address>
        <postal>
          <street>110 Fulbourn Rd</street>
          <city>Cambridge</city>
          <code>CB1 9NJ</code>
          <country>Great Britain</country>
        </postal>
        <email>Hannes.tschofenig@gmx.net </email>
        <uri>http://www.tschofenig.priv.at</uri>
      </address>
    </author>

    <date/>

    <area>Applications Area (app)</area>

    <workgroup>CORE</workgroup>
      
    <abstract>

      <t>The Hypertext Transfer Protocol (HTTP) has been designed with TCP as an underlying transport protocol. The Constrained Application Protocol (CoAP), which has been inspired by HTTP, has on the other hand been defined to make use of UDP. Reliable delivery, a simple congestion control mechanism, and flow control had been added to the CoAP protocol. UDP is a good choice for networks that do not perform any form of filtering and firewalling. There are, however, many deployment environments where UDP is either firewalled or subject to deep packet inspection. These environments make the use of CoAP brittle.</t>

      <t>This document defines the use of CoAP over TCP as well as CoAP over TLS.</t>
    </abstract>

  </front>

  <middle>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    
    <section title="Introduction" anchor="introduction">

   <t>The Internet protocol stack is organized in layers, namely data 
   link layer, network layer, transport layer, and the application layer.</t>

   <t>IP emerged as the waist of the hour glass and 
   supports a variety of link layers and new link layer technologies can
   be added in the future, without affecting IP.</t>
 
   <t>Combined with the end-to-end principle the hour glass indicates the
   level of protocol understanding intermediaries need to have in order
   to exchange forward IP packets between a sender and a receiver
   (absent any specific application layer entities, like proxies or
   caches).  Having IP as the waist meant that anyone could extend the
   layers above the network layer in the way they wanted to communicate
   end-to-end, including defining new transport layer protocols (as it
   was done with SCTP, and DCCP).</t>

   <t>Unfortunately, deployments departed from this ideal architecture. 
   When the <xref target="RFC7252">Constrained Application Protocol (CoAP)</xref> 
   was designed it was assumed that many Internet of Things deployments 
   would be clean-slate. Today, we know that some deployments have to 
   integrate well with existing enterprise infrastructure, where the use of UDP-based 
   protocols is not well-received and firewalling use is very common.</t>
   
   <t>To make IoT devices work smoothly in these demanding environments CoAP has to make 
   use of a different transport protocol, namely TCP <xref target="RFC0793"/> and in some situations even TLS <xref target="RFC5246"/>. 
   This document describes a shim header that conveys length information about the included payload.
   Modifications to CoAP are intentially avoided (e.g, to introduce optimizations).</t>

</section> 


    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->


    <section title="Terminology">

		<t>The key words "MUST", "MUST NOT", "REQUIRED", "MUST", "MUST NOT",   
		"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this 
		document are to be interpreted as described in <xref target="RFC2119"/>.
		</t>

    </section> 

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->


    <section title="Constrained Application Protocol">

    <t>The interaction model of CoAP on TCP is very similar to the one on UDP with key diffrences that it 
    is operated on TCP.

    <figure title="Abstract Layering of CoAP over TCP." anchor="">
    <artwork>
    <![CDATA[
        +----------------------+
        |      Application     |
        +----------------------+
        +----------------------+  \
        |  Requests/Responses  |  |
        |----------------------|  | CoAP
        |       Messages       |  |
        +----------------------+  /
        +----------------------+
        |          TCP         |
        +----------------------+
    ]]>
    </artwork>
    </figure>
    </t>

    <section title="Messaging model">
    <t>Becasue the TCP framing offers features that where not available in UDP and consequenlty 
    where implemented in CoAP, the need to keep the interaction indentical is not needed. The first
    paradigm that can be omitted is the concept of ACK at the applicaiton level.  Since TCP offers 
    reliability by nature, there is not need to offer a seconde degree of acknolegement.
    </t>
    <t>Hence the only message model supported when using CoAP over TCP is the NON message Model.  By nature, 
    A NON over TCP is still relaibale becasue of its transport Framing.
    <figure title="Message transmission over TCP" anchor="">
    <artwork>
    <![CDATA[
        Client              Server
           |                  |
           |   NON [0x01a0]   |
           +----------------->|
           |                  |
    ]]>
    </artwork>
    </figure>
    </t>
    </section>
    <section title=Request/Response Model>
    <t>Becaue of TCP implies NON message, the only supported request/response is of NON type.  The 
      Request is sent and a response is sent back only if needed
    <figure title="Message transmission over TCP" anchor="">
    <artwork>
    <![CDATA[
        Client              Server
           |                  |
           |   NON [0x7a11]   |
           | GET /temperature |
           |   (Token 0x74)   |
           +----------------->|
           |                  |
           |   NON [0x23bc]   |
           |   2.05 Content   |
           |   (Token 0x74)   |
           |     "22.5 C"     |
           |<-----------------+
           |                  |
    ]]>
    </artwork>
    </figure> 
    </t>
    </section>

    </section> 
    
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->


<section title="Message Format"> 
<t>While CoAP was originaly design for UDP and encasulate features to add robostness and 
flexibility to the transaction, these features are not needed anymore due to the nature 
of TCP.  Furthermore, the lenght is needed in order parse the the payload payload.  The 
CoAP header MUST follow this new format is used ofer TCP.  Notice that the Messsage ID was
deleted as the Transport framing can take care of duplicaiton and response request matching.
<figure title="TCP CoAP header" anchor="CoAP">
<artwork>
<![CDATA[
     0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        Message Length        | Ver| T |  TKL  |      Code     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]>
</artwork>
</figure>
</t>
<t>The fields in the header are defined as follows:
</t>
<t>Message Length :  16-bit unsigned integer in network byte order.  Used
  to predict the complet length of the CoAP header and playlod.
</t>
<t>Version (Ver):  2-bit unsigned integer.  Indicates the CoAP version
number.  Implementations of this specification MUST set this field
to 1 (01 binary).  Other values are reserved for future versions.
Messages with unknown version numbers MUST be silently ignored.
</t>
<t>Type (T):  2-bit unsigned integer.  Indicates if this message is of
      type Confirmable (0), Non-confirmable (1), Acknowledgement (2), or
      Reset (3).  The semantics of these message types are defined in
      Section 4.
</t>
<t>Token Length (TKL):  4-bit unsigned integer.  Indicates the length of
      the variable-length Token field (0-8 bytes).  Lengths 9-15 are
      reserved, MUST NOT be sent, and MUST be processed as a message
      format error.
</t>
<t>Code:  8-bit unsigned integer, split into a 3-bit class (most
      significant bits) and a 5-bit detail (least significant bits),
      documented as "c.dd" where "c" is a digit from 0 to 7 for the
      3-bit subfield and "dd" are two digits from 00 to 31 for the 5-bit
      subfield.  The class can indicate a request (0), a success
      response (2), a client error response (4), or a server error
      response (5).  (All other class values are reserved.)  As a
      special case, Code 0.00 indicates an Empty message.  In case of a
      request, the Code field indicates the Request Method; in case of a
      response, a Response Code.  Possible values are maintained in the
      CoAP Code Registries (Section 12.1).  The semantics of requests
      and responses are defined in Section 5.
</t>
</section> 


    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    

<section title="CoAP URI"> 

<t>CoAP over TCP will use two new URI scheme to define there transport layer; coap+tcp and coaps+tcp.  The same rules from Section 6 of <xref target="RFC7252"/> 
apply to these two new URI </t> 

<section title="coap+tcp URI scheme"> 
<t>coap-URI = "coap+tcp:" "//" host [ ":" port ] path-abempty [ "?" query ]</t>
<t>The same principle mentioned in section 6.1 from <xref target="RFC7252"/>applys to this scheme.
</t>  
</section>
<section title="coaps+tcp URI scheme"> 
<t>coap-URI = "coaps+tcp:" "//" host [ ":" port ] path-abempty [ "?" query ]</t>
<t>The same principle mentioned in section 6.2 from <xref target="RFC7252"/>applys to this scheme.
</t>  
</section>
      
</section> 


    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    
    <section title="Security Considerations" anchor="security">
 
 <t>This document defines how to convey CoAP over TCP and TLS. It does 
       not introduce new vulnerabilities beyond those described already in the 
       CoAP specification.</t>

<t>When CoAP is exchanged over TLS port 443 then the "TLS Application Layer Protocol Negotiation Extension" <xref target="I-D.ietf-tls-applayerprotoneg"/> MUST be used to allow demultiplexing at the server-side unless out-of-band information ensures that the client only interacts with a server that is able to demultiplex CoAP messages over port 443. This would, for example, be true for many Internet of Things deployments where clients are pre-configured to only ever talk with specific servers.</t>

<t>When CoAP over TLS is used then the use of the shim header that includes the length information is redundant since the TLS protocol headers already include length information. As such, the length header MUST be omitted when CoAP is exchanged over TLS.</t>

    </section>
    
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    
    <section title="IANA Considerations" anchor="iana">
      
      <t>This document requests a value from the "Application Layer Protocol Negotiation (ALPN) Protocol IDs" created by <xref target="I-D.ietf-tls-applayerprotoneg"/>:
    
    <list style="hanging">       
      <t hangText="Protocol:"> CoAP</t>
      <t hangText="Identification Sequence:">0x63 0x6f 0x61 0x70 ("coap")</t>
      <t hangText="Specification:"> This document.</t> 
    </list> 
    </t>
      
    </section>
    
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Acknowledgements" anchor="acknowledgements">
      <t>We would like to thank Michael Koster, Zach Shelby, and Szymon Sasin for their feedback.</t>
    </section>

  </middle>

  <back>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <references title="Normative References">
      &RFC5246; <!-- TLS 1.2 -->       
      &RFC7252; <!-- CoAP --> 
      &RFC2119; 
      &RFC0793; <!-- TCP --> 
      &I-D.ietf-tls-applayerprotoneg; 
      
    </references>

<!-- 
    <references title="Informative References">
        
 
    </references>
--> 

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    
  </back>

</rfc>
