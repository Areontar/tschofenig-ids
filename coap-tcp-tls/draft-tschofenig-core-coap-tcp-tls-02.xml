<?xml version="1.0" encoding="us-ascii"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC7258 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7258.xml">
  <!ENTITY RFC5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
  <!ENTITY RFC6347 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6347.xml">
  <!ENTITY RFC0793 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0793.xml">
  <!ENTITY RFC4395 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4395.xml">
  <!ENTITY RFC7252 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7252.xml">
  <!ENTITY I-D.ietf-tls-applayerprotoneg SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-tls-applayerprotoneg.xml">
  <!ENTITY I-D.ietf-dice-profile SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-dice-profile.xml">

]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc strict="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="2"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc category="std" docName="draft-tschofenig-core-coap-tcp-tls-02.txt" ipr="trust200902">

  <front>
    <title abbrev="TCP/TLS Transport for CoAP">A TCP and TLS Transport for the Constrained Application Protocol (CoAP)</title>

<author initials="S.L." surname="Lemay" fullname="Simon Lemay">
  <organization>Zebra Technologies</organization>
  <address>
    <postal>
      <street>820 W. Jackson Blvd.suite 700</street>
      <city>Chicago</city>
      <code>60607</code>
      <country>United States of America</country>
    </postal>
    <phone>+1-847-634-6700</phone>
    <email>slemay@zebra.com</email>
  </address>
</author>

<author initials="V.S.B." surname="Solorzano Barboza" fullname="Valik Solorzano Barboza">
  <organization>Zebra Technologies</organization>
  <address>
    <postal>
      <street>820 W. Jackson Blvd. suite 700</street>
      <city>Chicago</city>
      <code>60607</code>
      <country>United States of America</country>
    </postal>
    <phone>+1-847-634-6700</phone>
    <email>vsolorzanobarboza@zebra.com</email>
 </address>
</author>

    <author initials="H.T." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>ARM Ltd.</organization>
      <address>
        <postal>
          <street>110 Fulbourn Rd</street>
          <city>Cambridge</city>
          <code>CB1 9NJ</code>
          <country>Great Britain</country>
        </postal>
        <email>Hannes.tschofenig@gmx.net </email>
        <uri>http://www.tschofenig.priv.at</uri>
      </address>
    </author>

    <author initials="C.B." surname="Bormann" fullname="Carsten Bormann">
      <organization>Universitaet Bremen TZI</organization>
      <address>
        <postal>
          <street>Postfach 330440</street>
          <city>Bremen</city>
          <code>D-28359</code>
          <country>Germany</country>
        </postal>
        <phone>+49-421-218-63921</phone>
        <email>cabo@tzi.org</email>
      </address>
    </author>


    <date/>

    <area>Applications Area (app)</area>

    <workgroup>CORE</workgroup>
      
    <abstract>

      <t>The Hypertext Transfer Protocol (HTTP) has been designed with TCP as an underlying transport protocol. The Constrained Application Protocol (CoAP), which has been inspired by HTTP, has on the other hand been defined to make use of UDP. Reliable delivery, a simple congestion control mechanism, and flow control had been added to the CoAP protocol. UDP is a good choice for networks that do not perform any form of filtering and firewalling. There are, however, many deployment environments where UDP is either firewalled or subject to deep packet inspection. These environments make the use of CoAP brittle.</t>

      <t>This document defines the use of CoAP over TCP as well as CoAP over TLS.</t>
    </abstract>

  </front>

  <middle>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    
    <section title="Introduction" anchor="introduction">

   <t>The Internet protocol stack is organized in layers, namely data 
   link layer, network layer, transport layer, and the application layer.</t>

   <t>IP emerged as the waist of the hour glass and 
   supports a variety of link layers and new link layer technologies can
   be added in the future, without affecting IP.</t>
 
   <t>Combined with the end-to-end principle the hour glass indicates the
   level of protocol understanding intermediaries need to have in order
   to exchange forward IP packets between a sender and a receiver
   (absent any specific application layer entities, like proxies or
   caches).  Having IP as the waist meant that anyone could extend the
   layers above the network layer in the way they wanted to communicate
   end-to-end, including defining new transport layer protocols (as it
   was done with SCTP, and DCCP).</t>

   <t>Unfortunately, deployments departed from this ideal architecture. 
   When the <xref target="RFC7252">Constrained Application Protocol (CoAP)</xref> 
   was designed it was assumed that many Internet of Things (IoT) deployments 
   would be clean-slate. Today, we know that some deployments have to 
   integrate well with existing enterprise infrastructure, where the use of UDP-based 
   protocols is not well-received and firewalling use is very common.</t>
   
   <t>To make IoT devices work smoothly in these demanding environments CoAP has to make 
   use of a different transport protocol, namely TCP <xref target="RFC0793"/> and in some situations even TLS <xref target="RFC5246"/>. 
   This document describes a shim header that conveys length information about the included payload.
   Modifications to CoAP are intentially avoided (e.g, to introduce optimizations).</t>

</section> 


    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->


    <section title="Terminology">

		<t>The key words "MUST", "MUST NOT", "REQUIRED", "MUST", "MUST NOT",   
		"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this 
		document are to be interpreted as described in <xref target="RFC2119"/>.
		</t>

    </section> 

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->


    <section title="Constrained Application Protocol">

    <t>The interaction model of CoAP over TCP is very similar to the one for CoAP over UDP with the key difference that TCP voids the need to replicate certain transport layer protocol features, such as reliable delivery, fragmentation and reassemply, as well as congestion control, at the CoAP level. The protocol stack is shown in <xref target="stack"/>.</t>

    <t>
    <figure title="The CoAP over TLS/TCP Protocol Stack" anchor="stack">
    <artwork>
    <![CDATA[
        +----------------------+
        |      Application     |
        +----------------------+
        +----------------------+  \
        |  Requests/Responses  |  |
        |----------------------|  | CoAP
        |       Messages       |  |
        +----------------------+  /
        +-----------+    ^    
        |    TLS    |    |
        +-----------+    v
        +----------------------+
        |          TCP         |
        +----------------------+
    ]]>
    </artwork>
    </figure>
    </t>


    <t>TCP offers features that are not available in UDP and consequently 
    got added to CoAP. The first
    paradigm that can be omitted is the concept of ACKs in CoAP.  Since TCP offers 
    reliabile delivery, there is not need to offer a redundant acknowledgement at the CoAP messaging layer.
    </t>
    <t>Hence, the only message model supported when using CoAP over TCP is the NON message model.  By nature, 
    a NON over TCP is still transmitted reliably. <xref target="NON"/> shows this message exchange graphically.</t> 

    <t>
    <figure title="NON Message Transmission over TCP." anchor="NON">
    <artwork>
    <![CDATA[
        Client              Server
           |                  |
           |   NON [0x01a0]   |
           +----------------->|
           |                  |
    ]]>
    </artwork>
    </figure>
    </t>

    <t>Because of the NON message model, the only supported request/response in CoAP is the NON type. A response is sent back only if needed, as shown in <xref target="NON2"/>.</t>

    <t>
    <figure title="NON Request/Response." anchor="NON2">
    <artwork>
    <![CDATA[
        Client              Server
           |                  |
           |   NON [0x7a11]   |
           | GET /temperature |
           |   (Token 0x74)   |
           +----------------->|
           |                  |
           |   NON [0x23bc]   |
           |   2.05 Content   |
           |   (Token 0x74)   |
           |     "22.5 C"     |
           |<-----------------+
           |                  |
    ]]>
    </artwork>
    </figure> 
    </t>
    </section> 
    
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->


<section title="Message Format"> 
<t>While CoAP was originaly design for UDP and encasulate features to add robostness and 
flexibility to the transaction, these features are not needed anymore due to the nature 
of TCP. A delimiter is nevertheless needed to separate different payloads in a stream oriented transport protocol like TCP. For this purpose, the length field is used as a delimiter. 
</t> 

<t><xref target="CoAP-Header"/> shows the CoAP message format as defined in RFC 7252. <xref target="Shim"/> shows the 2-byte shim header carring length information prepending the CoAP message header.</t>

<t>
<figure title="RFC 7252 defined CoAP Message Format." anchor="CoAP-Header">
<artwork>
<![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Ver| T |  TKL  |      Code     |          Message ID           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Token (if any, TKL bytes) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Options (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |1 1 1 1 1 1 1 1|    Payload (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]>
</artwork>
</figure>
</t>

<t>
<figure title="CoAP Header with Prepending Shim Header." anchor="Shim">
<artwork>
<![CDATA[
     0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        Message Length         |Ver| T |  TKL  |      Code     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Remaining CoAP Message Header ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]>
</artwork>
</figure>
</t>

<t>The 'Message Length' field is 16-bit unsigned integer in network byte order used as delimiter and to denote the length of the subsequent CoAP message (including the CoAP header but excluding this message length field) in bytes. The semantic of the CoAP header fields is left unchanged. </t>



</section> 


    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    

<section anchor="URI" title="CoAP URI"> 

   <t>CoAP <xref target="RFC7252"/> defined the "coap" and "coaps" URI schemes for identifying CoAP
   resources and providing a means of locating the resource. RFC 7252 defined these 
resources for use with CoAP over UDP.</t>

<t>This specification introduces two new URI schemes, namely "coap+tcp" and "coaps+tcp".  The rules from Section 6 of <xref target="RFC7252"/> 
apply to these two new URI. </t> 

<section title="coap+tcp URI scheme"> 
<t>coap-URI = "coap+tcp:" "//" host [ ":" port ] path-abempty [ "?" query ]</t>
<t>The semantic defined in Section 6.1 from <xref target="RFC7252"/> applies to this URI scheme.</t>  
</section>

<section title="coaps+tcp URI scheme"> 
<t>coap-URI = "coaps+tcp:" "//" host [ ":" port ] path-abempty [ "?" query ]</t>
<t>The semantic defined in Section 6.2 from <xref target="RFC7252"/> applies to this URI scheme.</t>  
</section>
      
</section> 


    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    
    <section title="Security Considerations" anchor="security">
 
 <t>This document defines how to convey CoAP over TCP and TLS. It does 
       not introduce new vulnerabilities beyond those described already in the 
       CoAP specification. CoAP <xref target="RFC7252"/> makes use of DTLS 1.2 and this specification consequently uses TLS 1.2 <xref target="RFC5246"/>. CoAP MUST NOT be used with older versions of TLS. Guidelines for use of ciphersuites and TLS extensions can be found in <xref target="I-D.ietf-dice-profile"/>. </t>

<t>When CoAP is exchanged over TLS port 443 then the "TLS Application Layer Protocol Negotiation Extension" <xref target="I-D.ietf-tls-applayerprotoneg"/> MUST be used to allow demultiplexing at the server-side unless out-of-band information ensures that the client only interacts with a server that is able to demultiplex CoAP messages over port 443. This would, for example, be true for many Internet of Things deployments where clients are pre-configured to only ever talk with specific servers.</t>

<t>When CoAP over TLS is used then the shim header that includes the length information is redundant since the TLS protocol headers already include length information. As such, the shim header MUST be omitted when CoAP messages are carried over TLS.</t>

    </section>
    
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    
    <section title="IANA Considerations" anchor="iana">

<section title="URI Schemes"> 


<t>This document registers two new URI schemes, namely "coap+tcp" and "coaps+tcp", for the use of 
   CoAP over TCP and for CoAP over TLS over TCP, respectively. The
   "coap+tcp" and "coaps+tcp" URI schemes can thus be compared to the "http" and
   "https" URI schemes.</t>

<t>The syntax of the "coap" and "coaps" URI schemes is specified in Section 6 of <xref target="RFC7252"/> and 
this document re-uses their semantics with the sole exception that TCP is used as a transport protocol.</t>

<t>IANA is requested to add these new URI schemes to the registry established with <xref target="RFC4395"/>.</t>

</section> 
      
<section title="ALPN Protocol ID">

      <t>This document requests a value from the "Application Layer Protocol Negotiation (ALPN) Protocol IDs" created by <xref target="I-D.ietf-tls-applayerprotoneg"/>:
    
    <list style="hanging">       
      <t hangText="Protocol:"> CoAP</t>
      <t hangText="Identification Sequence:">0x63 0x6f 0x61 0x70 ("coap")</t>
      <t hangText="Specification:"> This document.</t> 
    </list> 
    </t>

</section>

    </section>
    
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section title="Acknowledgements" anchor="acknowledgements">
      <t>We would like to thank Michael Koster, Zach Shelby, Matthias Kovatsch, and Szymon Sasin for their feedback.</t>
    </section>

  </middle>

  <back>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <references title="Normative References">
      &RFC5246; <!-- TLS 1.2 -->       
      &RFC7252; <!-- CoAP --> 
      &RFC2119; 
      &RFC4395; 
      &RFC0793; <!-- TCP --> 
      &I-D.ietf-tls-applayerprotoneg; 
      &I-D.ietf-dice-profile;
      
    </references>


    <references title="Informative References">
      
    &RFC6347; 
 
    </references>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    
  </back>

</rfc>
